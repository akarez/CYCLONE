
cyclone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003734  08003734  00004734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003764  08003764  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003764  08003764  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003764  08003764  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003768  08003768  00004768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800376c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08003778  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003778  000050d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abd1  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc7  00000000  00000000  0000fc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000117d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000954  00000000  00000000  000123b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f247  00000000  00000000  00012d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e960  00000000  00000000  00021f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d13e  00000000  00000000  000308b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  0008da34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000906bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800371c 	.word	0x0800371c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800371c 	.word	0x0800371c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fbff 	bl	8000a34 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb3f 	bl	80008c4 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbf1 	bl	8000a34 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fbe7 	bl	8000a34 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb69 	bl	800094c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb5f 	bl	800094c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_fadd>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	46ce      	mov	lr, r9
 80002a0:	4647      	mov	r7, r8
 80002a2:	0243      	lsls	r3, r0, #9
 80002a4:	0a5a      	lsrs	r2, r3, #9
 80002a6:	024e      	lsls	r6, r1, #9
 80002a8:	0045      	lsls	r5, r0, #1
 80002aa:	0fc4      	lsrs	r4, r0, #31
 80002ac:	0048      	lsls	r0, r1, #1
 80002ae:	4691      	mov	r9, r2
 80002b0:	0e2d      	lsrs	r5, r5, #24
 80002b2:	0a72      	lsrs	r2, r6, #9
 80002b4:	0e00      	lsrs	r0, r0, #24
 80002b6:	4694      	mov	ip, r2
 80002b8:	b580      	push	{r7, lr}
 80002ba:	099b      	lsrs	r3, r3, #6
 80002bc:	0fc9      	lsrs	r1, r1, #31
 80002be:	09b6      	lsrs	r6, r6, #6
 80002c0:	1a2a      	subs	r2, r5, r0
 80002c2:	428c      	cmp	r4, r1
 80002c4:	d021      	beq.n	800030a <__aeabi_fadd+0x6e>
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	dd0d      	ble.n	80002e6 <__aeabi_fadd+0x4a>
 80002ca:	2800      	cmp	r0, #0
 80002cc:	d12d      	bne.n	800032a <__aeabi_fadd+0x8e>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fadd+0x38>
 80002d2:	e08d      	b.n	80003f0 <__aeabi_fadd+0x154>
 80002d4:	1e51      	subs	r1, r2, #1
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	d100      	bne.n	80002dc <__aeabi_fadd+0x40>
 80002da:	e11d      	b.n	8000518 <__aeabi_fadd+0x27c>
 80002dc:	2aff      	cmp	r2, #255	@ 0xff
 80002de:	d100      	bne.n	80002e2 <__aeabi_fadd+0x46>
 80002e0:	e0ab      	b.n	800043a <__aeabi_fadd+0x19e>
 80002e2:	000a      	movs	r2, r1
 80002e4:	e027      	b.n	8000336 <__aeabi_fadd+0x9a>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d04d      	beq.n	8000386 <__aeabi_fadd+0xea>
 80002ea:	1b42      	subs	r2, r0, r5
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d000      	beq.n	80002f2 <__aeabi_fadd+0x56>
 80002f0:	e0cc      	b.n	800048c <__aeabi_fadd+0x1f0>
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fadd+0x5c>
 80002f6:	e079      	b.n	80003ec <__aeabi_fadd+0x150>
 80002f8:	1e54      	subs	r4, r2, #1
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	d100      	bne.n	8000300 <__aeabi_fadd+0x64>
 80002fe:	e128      	b.n	8000552 <__aeabi_fadd+0x2b6>
 8000300:	2aff      	cmp	r2, #255	@ 0xff
 8000302:	d100      	bne.n	8000306 <__aeabi_fadd+0x6a>
 8000304:	e097      	b.n	8000436 <__aeabi_fadd+0x19a>
 8000306:	0022      	movs	r2, r4
 8000308:	e0c5      	b.n	8000496 <__aeabi_fadd+0x1fa>
 800030a:	2a00      	cmp	r2, #0
 800030c:	dc00      	bgt.n	8000310 <__aeabi_fadd+0x74>
 800030e:	e096      	b.n	800043e <__aeabi_fadd+0x1a2>
 8000310:	2800      	cmp	r0, #0
 8000312:	d04f      	beq.n	80003b4 <__aeabi_fadd+0x118>
 8000314:	2dff      	cmp	r5, #255	@ 0xff
 8000316:	d100      	bne.n	800031a <__aeabi_fadd+0x7e>
 8000318:	e08f      	b.n	800043a <__aeabi_fadd+0x19e>
 800031a:	2180      	movs	r1, #128	@ 0x80
 800031c:	04c9      	lsls	r1, r1, #19
 800031e:	430e      	orrs	r6, r1
 8000320:	2a1b      	cmp	r2, #27
 8000322:	dd51      	ble.n	80003c8 <__aeabi_fadd+0x12c>
 8000324:	002a      	movs	r2, r5
 8000326:	3301      	adds	r3, #1
 8000328:	e018      	b.n	800035c <__aeabi_fadd+0xc0>
 800032a:	2dff      	cmp	r5, #255	@ 0xff
 800032c:	d100      	bne.n	8000330 <__aeabi_fadd+0x94>
 800032e:	e084      	b.n	800043a <__aeabi_fadd+0x19e>
 8000330:	2180      	movs	r1, #128	@ 0x80
 8000332:	04c9      	lsls	r1, r1, #19
 8000334:	430e      	orrs	r6, r1
 8000336:	2101      	movs	r1, #1
 8000338:	2a1b      	cmp	r2, #27
 800033a:	dc08      	bgt.n	800034e <__aeabi_fadd+0xb2>
 800033c:	0031      	movs	r1, r6
 800033e:	2020      	movs	r0, #32
 8000340:	40d1      	lsrs	r1, r2
 8000342:	1a82      	subs	r2, r0, r2
 8000344:	4096      	lsls	r6, r2
 8000346:	0032      	movs	r2, r6
 8000348:	1e50      	subs	r0, r2, #1
 800034a:	4182      	sbcs	r2, r0
 800034c:	4311      	orrs	r1, r2
 800034e:	1a5b      	subs	r3, r3, r1
 8000350:	015a      	lsls	r2, r3, #5
 8000352:	d459      	bmi.n	8000408 <__aeabi_fadd+0x16c>
 8000354:	2107      	movs	r1, #7
 8000356:	002a      	movs	r2, r5
 8000358:	4019      	ands	r1, r3
 800035a:	d049      	beq.n	80003f0 <__aeabi_fadd+0x154>
 800035c:	210f      	movs	r1, #15
 800035e:	4019      	ands	r1, r3
 8000360:	2904      	cmp	r1, #4
 8000362:	d000      	beq.n	8000366 <__aeabi_fadd+0xca>
 8000364:	3304      	adds	r3, #4
 8000366:	0159      	lsls	r1, r3, #5
 8000368:	d542      	bpl.n	80003f0 <__aeabi_fadd+0x154>
 800036a:	1c50      	adds	r0, r2, #1
 800036c:	2afe      	cmp	r2, #254	@ 0xfe
 800036e:	d03a      	beq.n	80003e6 <__aeabi_fadd+0x14a>
 8000370:	019b      	lsls	r3, r3, #6
 8000372:	b2c0      	uxtb	r0, r0
 8000374:	0a5b      	lsrs	r3, r3, #9
 8000376:	05c0      	lsls	r0, r0, #23
 8000378:	4318      	orrs	r0, r3
 800037a:	07e4      	lsls	r4, r4, #31
 800037c:	4320      	orrs	r0, r4
 800037e:	bcc0      	pop	{r6, r7}
 8000380:	46b9      	mov	r9, r7
 8000382:	46b0      	mov	r8, r6
 8000384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000386:	20fe      	movs	r0, #254	@ 0xfe
 8000388:	4680      	mov	r8, r0
 800038a:	1c6f      	adds	r7, r5, #1
 800038c:	0038      	movs	r0, r7
 800038e:	4647      	mov	r7, r8
 8000390:	4207      	tst	r7, r0
 8000392:	d000      	beq.n	8000396 <__aeabi_fadd+0xfa>
 8000394:	e08e      	b.n	80004b4 <__aeabi_fadd+0x218>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d000      	beq.n	800039c <__aeabi_fadd+0x100>
 800039a:	e0b4      	b.n	8000506 <__aeabi_fadd+0x26a>
 800039c:	2b00      	cmp	r3, #0
 800039e:	d100      	bne.n	80003a2 <__aeabi_fadd+0x106>
 80003a0:	e0db      	b.n	800055a <__aeabi_fadd+0x2be>
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d06c      	beq.n	8000480 <__aeabi_fadd+0x1e4>
 80003a6:	1b98      	subs	r0, r3, r6
 80003a8:	0145      	lsls	r5, r0, #5
 80003aa:	d400      	bmi.n	80003ae <__aeabi_fadd+0x112>
 80003ac:	e0f7      	b.n	800059e <__aeabi_fadd+0x302>
 80003ae:	000c      	movs	r4, r1
 80003b0:	1af3      	subs	r3, r6, r3
 80003b2:	e03d      	b.n	8000430 <__aeabi_fadd+0x194>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d01b      	beq.n	80003f0 <__aeabi_fadd+0x154>
 80003b8:	1e51      	subs	r1, r2, #1
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	d100      	bne.n	80003c0 <__aeabi_fadd+0x124>
 80003be:	e082      	b.n	80004c6 <__aeabi_fadd+0x22a>
 80003c0:	2aff      	cmp	r2, #255	@ 0xff
 80003c2:	d03a      	beq.n	800043a <__aeabi_fadd+0x19e>
 80003c4:	000a      	movs	r2, r1
 80003c6:	e7ab      	b.n	8000320 <__aeabi_fadd+0x84>
 80003c8:	0031      	movs	r1, r6
 80003ca:	2020      	movs	r0, #32
 80003cc:	40d1      	lsrs	r1, r2
 80003ce:	1a82      	subs	r2, r0, r2
 80003d0:	4096      	lsls	r6, r2
 80003d2:	0032      	movs	r2, r6
 80003d4:	1e50      	subs	r0, r2, #1
 80003d6:	4182      	sbcs	r2, r0
 80003d8:	430a      	orrs	r2, r1
 80003da:	189b      	adds	r3, r3, r2
 80003dc:	015a      	lsls	r2, r3, #5
 80003de:	d5b9      	bpl.n	8000354 <__aeabi_fadd+0xb8>
 80003e0:	1c6a      	adds	r2, r5, #1
 80003e2:	2dfe      	cmp	r5, #254	@ 0xfe
 80003e4:	d175      	bne.n	80004d2 <__aeabi_fadd+0x236>
 80003e6:	20ff      	movs	r0, #255	@ 0xff
 80003e8:	2300      	movs	r3, #0
 80003ea:	e7c4      	b.n	8000376 <__aeabi_fadd+0xda>
 80003ec:	000c      	movs	r4, r1
 80003ee:	0033      	movs	r3, r6
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	2aff      	cmp	r2, #255	@ 0xff
 80003f4:	d146      	bne.n	8000484 <__aeabi_fadd+0x1e8>
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f5      	beq.n	80003e6 <__aeabi_fadd+0x14a>
 80003fa:	2280      	movs	r2, #128	@ 0x80
 80003fc:	03d2      	lsls	r2, r2, #15
 80003fe:	4313      	orrs	r3, r2
 8000400:	025b      	lsls	r3, r3, #9
 8000402:	20ff      	movs	r0, #255	@ 0xff
 8000404:	0a5b      	lsrs	r3, r3, #9
 8000406:	e7b6      	b.n	8000376 <__aeabi_fadd+0xda>
 8000408:	019f      	lsls	r7, r3, #6
 800040a:	09bf      	lsrs	r7, r7, #6
 800040c:	0038      	movs	r0, r7
 800040e:	f000 fbcb 	bl	8000ba8 <__clzsi2>
 8000412:	3805      	subs	r0, #5
 8000414:	4087      	lsls	r7, r0
 8000416:	4285      	cmp	r5, r0
 8000418:	dc24      	bgt.n	8000464 <__aeabi_fadd+0x1c8>
 800041a:	003b      	movs	r3, r7
 800041c:	2120      	movs	r1, #32
 800041e:	1b42      	subs	r2, r0, r5
 8000420:	3201      	adds	r2, #1
 8000422:	40d3      	lsrs	r3, r2
 8000424:	1a8a      	subs	r2, r1, r2
 8000426:	4097      	lsls	r7, r2
 8000428:	1e7a      	subs	r2, r7, #1
 800042a:	4197      	sbcs	r7, r2
 800042c:	2200      	movs	r2, #0
 800042e:	433b      	orrs	r3, r7
 8000430:	0759      	lsls	r1, r3, #29
 8000432:	d193      	bne.n	800035c <__aeabi_fadd+0xc0>
 8000434:	e797      	b.n	8000366 <__aeabi_fadd+0xca>
 8000436:	000c      	movs	r4, r1
 8000438:	0033      	movs	r3, r6
 800043a:	08db      	lsrs	r3, r3, #3
 800043c:	e7db      	b.n	80003f6 <__aeabi_fadd+0x15a>
 800043e:	2a00      	cmp	r2, #0
 8000440:	d014      	beq.n	800046c <__aeabi_fadd+0x1d0>
 8000442:	1b42      	subs	r2, r0, r5
 8000444:	2d00      	cmp	r5, #0
 8000446:	d14b      	bne.n	80004e0 <__aeabi_fadd+0x244>
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0d0      	beq.n	80003ee <__aeabi_fadd+0x152>
 800044c:	1e51      	subs	r1, r2, #1
 800044e:	2a01      	cmp	r2, #1
 8000450:	d100      	bne.n	8000454 <__aeabi_fadd+0x1b8>
 8000452:	e09e      	b.n	8000592 <__aeabi_fadd+0x2f6>
 8000454:	2aff      	cmp	r2, #255	@ 0xff
 8000456:	d0ef      	beq.n	8000438 <__aeabi_fadd+0x19c>
 8000458:	000a      	movs	r2, r1
 800045a:	2a1b      	cmp	r2, #27
 800045c:	dd5f      	ble.n	800051e <__aeabi_fadd+0x282>
 800045e:	0002      	movs	r2, r0
 8000460:	1c73      	adds	r3, r6, #1
 8000462:	e77b      	b.n	800035c <__aeabi_fadd+0xc0>
 8000464:	4b50      	ldr	r3, [pc, #320]	@ (80005a8 <__aeabi_fadd+0x30c>)
 8000466:	1a2a      	subs	r2, r5, r0
 8000468:	403b      	ands	r3, r7
 800046a:	e7e1      	b.n	8000430 <__aeabi_fadd+0x194>
 800046c:	21fe      	movs	r1, #254	@ 0xfe
 800046e:	1c6a      	adds	r2, r5, #1
 8000470:	4211      	tst	r1, r2
 8000472:	d13b      	bne.n	80004ec <__aeabi_fadd+0x250>
 8000474:	2d00      	cmp	r5, #0
 8000476:	d15d      	bne.n	8000534 <__aeabi_fadd+0x298>
 8000478:	2b00      	cmp	r3, #0
 800047a:	d07f      	beq.n	800057c <__aeabi_fadd+0x2e0>
 800047c:	2e00      	cmp	r6, #0
 800047e:	d17f      	bne.n	8000580 <__aeabi_fadd+0x2e4>
 8000480:	2200      	movs	r2, #0
 8000482:	08db      	lsrs	r3, r3, #3
 8000484:	025b      	lsls	r3, r3, #9
 8000486:	0a5b      	lsrs	r3, r3, #9
 8000488:	b2d0      	uxtb	r0, r2
 800048a:	e774      	b.n	8000376 <__aeabi_fadd+0xda>
 800048c:	28ff      	cmp	r0, #255	@ 0xff
 800048e:	d0d2      	beq.n	8000436 <__aeabi_fadd+0x19a>
 8000490:	2480      	movs	r4, #128	@ 0x80
 8000492:	04e4      	lsls	r4, r4, #19
 8000494:	4323      	orrs	r3, r4
 8000496:	2401      	movs	r4, #1
 8000498:	2a1b      	cmp	r2, #27
 800049a:	dc07      	bgt.n	80004ac <__aeabi_fadd+0x210>
 800049c:	001c      	movs	r4, r3
 800049e:	2520      	movs	r5, #32
 80004a0:	40d4      	lsrs	r4, r2
 80004a2:	1aaa      	subs	r2, r5, r2
 80004a4:	4093      	lsls	r3, r2
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	4193      	sbcs	r3, r2
 80004aa:	431c      	orrs	r4, r3
 80004ac:	1b33      	subs	r3, r6, r4
 80004ae:	0005      	movs	r5, r0
 80004b0:	000c      	movs	r4, r1
 80004b2:	e74d      	b.n	8000350 <__aeabi_fadd+0xb4>
 80004b4:	1b9f      	subs	r7, r3, r6
 80004b6:	017a      	lsls	r2, r7, #5
 80004b8:	d422      	bmi.n	8000500 <__aeabi_fadd+0x264>
 80004ba:	2f00      	cmp	r7, #0
 80004bc:	d1a6      	bne.n	800040c <__aeabi_fadd+0x170>
 80004be:	2400      	movs	r4, #0
 80004c0:	2000      	movs	r0, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	e757      	b.n	8000376 <__aeabi_fadd+0xda>
 80004c6:	199b      	adds	r3, r3, r6
 80004c8:	2501      	movs	r5, #1
 80004ca:	3201      	adds	r2, #1
 80004cc:	0159      	lsls	r1, r3, #5
 80004ce:	d400      	bmi.n	80004d2 <__aeabi_fadd+0x236>
 80004d0:	e740      	b.n	8000354 <__aeabi_fadd+0xb8>
 80004d2:	2101      	movs	r1, #1
 80004d4:	4835      	ldr	r0, [pc, #212]	@ (80005ac <__aeabi_fadd+0x310>)
 80004d6:	4019      	ands	r1, r3
 80004d8:	085b      	lsrs	r3, r3, #1
 80004da:	4003      	ands	r3, r0
 80004dc:	430b      	orrs	r3, r1
 80004de:	e7a7      	b.n	8000430 <__aeabi_fadd+0x194>
 80004e0:	28ff      	cmp	r0, #255	@ 0xff
 80004e2:	d0a9      	beq.n	8000438 <__aeabi_fadd+0x19c>
 80004e4:	2180      	movs	r1, #128	@ 0x80
 80004e6:	04c9      	lsls	r1, r1, #19
 80004e8:	430b      	orrs	r3, r1
 80004ea:	e7b6      	b.n	800045a <__aeabi_fadd+0x1be>
 80004ec:	2aff      	cmp	r2, #255	@ 0xff
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fadd+0x256>
 80004f0:	e779      	b.n	80003e6 <__aeabi_fadd+0x14a>
 80004f2:	199b      	adds	r3, r3, r6
 80004f4:	085b      	lsrs	r3, r3, #1
 80004f6:	0759      	lsls	r1, r3, #29
 80004f8:	d000      	beq.n	80004fc <__aeabi_fadd+0x260>
 80004fa:	e72f      	b.n	800035c <__aeabi_fadd+0xc0>
 80004fc:	08db      	lsrs	r3, r3, #3
 80004fe:	e7c1      	b.n	8000484 <__aeabi_fadd+0x1e8>
 8000500:	000c      	movs	r4, r1
 8000502:	1af7      	subs	r7, r6, r3
 8000504:	e782      	b.n	800040c <__aeabi_fadd+0x170>
 8000506:	2b00      	cmp	r3, #0
 8000508:	d12c      	bne.n	8000564 <__aeabi_fadd+0x2c8>
 800050a:	2e00      	cmp	r6, #0
 800050c:	d193      	bne.n	8000436 <__aeabi_fadd+0x19a>
 800050e:	2380      	movs	r3, #128	@ 0x80
 8000510:	2400      	movs	r4, #0
 8000512:	20ff      	movs	r0, #255	@ 0xff
 8000514:	03db      	lsls	r3, r3, #15
 8000516:	e72e      	b.n	8000376 <__aeabi_fadd+0xda>
 8000518:	2501      	movs	r5, #1
 800051a:	1b9b      	subs	r3, r3, r6
 800051c:	e718      	b.n	8000350 <__aeabi_fadd+0xb4>
 800051e:	0019      	movs	r1, r3
 8000520:	2520      	movs	r5, #32
 8000522:	40d1      	lsrs	r1, r2
 8000524:	1aaa      	subs	r2, r5, r2
 8000526:	4093      	lsls	r3, r2
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	4193      	sbcs	r3, r2
 800052c:	430b      	orrs	r3, r1
 800052e:	0005      	movs	r5, r0
 8000530:	199b      	adds	r3, r3, r6
 8000532:	e753      	b.n	80003dc <__aeabi_fadd+0x140>
 8000534:	2b00      	cmp	r3, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x29e>
 8000538:	e77e      	b.n	8000438 <__aeabi_fadd+0x19c>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x2a4>
 800053e:	e77c      	b.n	800043a <__aeabi_fadd+0x19e>
 8000540:	2280      	movs	r2, #128	@ 0x80
 8000542:	03d2      	lsls	r2, r2, #15
 8000544:	4591      	cmp	r9, r2
 8000546:	d302      	bcc.n	800054e <__aeabi_fadd+0x2b2>
 8000548:	4594      	cmp	ip, r2
 800054a:	d200      	bcs.n	800054e <__aeabi_fadd+0x2b2>
 800054c:	0033      	movs	r3, r6
 800054e:	08db      	lsrs	r3, r3, #3
 8000550:	e753      	b.n	80003fa <__aeabi_fadd+0x15e>
 8000552:	000c      	movs	r4, r1
 8000554:	1af3      	subs	r3, r6, r3
 8000556:	3501      	adds	r5, #1
 8000558:	e6fa      	b.n	8000350 <__aeabi_fadd+0xb4>
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0af      	beq.n	80004be <__aeabi_fadd+0x222>
 800055e:	000c      	movs	r4, r1
 8000560:	0033      	movs	r3, r6
 8000562:	e78d      	b.n	8000480 <__aeabi_fadd+0x1e4>
 8000564:	2e00      	cmp	r6, #0
 8000566:	d100      	bne.n	800056a <__aeabi_fadd+0x2ce>
 8000568:	e767      	b.n	800043a <__aeabi_fadd+0x19e>
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	03d2      	lsls	r2, r2, #15
 800056e:	4591      	cmp	r9, r2
 8000570:	d3ed      	bcc.n	800054e <__aeabi_fadd+0x2b2>
 8000572:	4594      	cmp	ip, r2
 8000574:	d2eb      	bcs.n	800054e <__aeabi_fadd+0x2b2>
 8000576:	000c      	movs	r4, r1
 8000578:	0033      	movs	r3, r6
 800057a:	e7e8      	b.n	800054e <__aeabi_fadd+0x2b2>
 800057c:	0033      	movs	r3, r6
 800057e:	e77f      	b.n	8000480 <__aeabi_fadd+0x1e4>
 8000580:	199b      	adds	r3, r3, r6
 8000582:	2200      	movs	r2, #0
 8000584:	0159      	lsls	r1, r3, #5
 8000586:	d5b9      	bpl.n	80004fc <__aeabi_fadd+0x260>
 8000588:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <__aeabi_fadd+0x30c>)
 800058a:	4013      	ands	r3, r2
 800058c:	08db      	lsrs	r3, r3, #3
 800058e:	2201      	movs	r2, #1
 8000590:	e778      	b.n	8000484 <__aeabi_fadd+0x1e8>
 8000592:	199b      	adds	r3, r3, r6
 8000594:	3201      	adds	r2, #1
 8000596:	3501      	adds	r5, #1
 8000598:	0159      	lsls	r1, r3, #5
 800059a:	d49a      	bmi.n	80004d2 <__aeabi_fadd+0x236>
 800059c:	e6da      	b.n	8000354 <__aeabi_fadd+0xb8>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d08d      	beq.n	80004be <__aeabi_fadd+0x222>
 80005a2:	08db      	lsrs	r3, r3, #3
 80005a4:	e76e      	b.n	8000484 <__aeabi_fadd+0x1e8>
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	fbffffff 	.word	0xfbffffff
 80005ac:	7dffffff 	.word	0x7dffffff

080005b0 <__aeabi_fmul>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	464f      	mov	r7, r9
 80005b4:	4646      	mov	r6, r8
 80005b6:	46d6      	mov	lr, sl
 80005b8:	0243      	lsls	r3, r0, #9
 80005ba:	0a5b      	lsrs	r3, r3, #9
 80005bc:	0045      	lsls	r5, r0, #1
 80005be:	b5c0      	push	{r6, r7, lr}
 80005c0:	4699      	mov	r9, r3
 80005c2:	1c0f      	adds	r7, r1, #0
 80005c4:	0e2d      	lsrs	r5, r5, #24
 80005c6:	0fc6      	lsrs	r6, r0, #31
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fmul+0x1e>
 80005cc:	e088      	b.n	80006e0 <__aeabi_fmul+0x130>
 80005ce:	2dff      	cmp	r5, #255	@ 0xff
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fmul+0x24>
 80005d2:	e08d      	b.n	80006f0 <__aeabi_fmul+0x140>
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	04d2      	lsls	r2, r2, #19
 80005da:	431a      	orrs	r2, r3
 80005dc:	2300      	movs	r3, #0
 80005de:	4691      	mov	r9, r2
 80005e0:	4698      	mov	r8, r3
 80005e2:	469a      	mov	sl, r3
 80005e4:	3d7f      	subs	r5, #127	@ 0x7f
 80005e6:	027c      	lsls	r4, r7, #9
 80005e8:	007b      	lsls	r3, r7, #1
 80005ea:	0a64      	lsrs	r4, r4, #9
 80005ec:	0e1b      	lsrs	r3, r3, #24
 80005ee:	0fff      	lsrs	r7, r7, #31
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d068      	beq.n	80006c6 <__aeabi_fmul+0x116>
 80005f4:	2bff      	cmp	r3, #255	@ 0xff
 80005f6:	d021      	beq.n	800063c <__aeabi_fmul+0x8c>
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	00e4      	lsls	r4, r4, #3
 80005fc:	04d2      	lsls	r2, r2, #19
 80005fe:	4314      	orrs	r4, r2
 8000600:	4642      	mov	r2, r8
 8000602:	3b7f      	subs	r3, #127	@ 0x7f
 8000604:	195b      	adds	r3, r3, r5
 8000606:	2100      	movs	r1, #0
 8000608:	1c5d      	adds	r5, r3, #1
 800060a:	2a0a      	cmp	r2, #10
 800060c:	dc2e      	bgt.n	800066c <__aeabi_fmul+0xbc>
 800060e:	407e      	eors	r6, r7
 8000610:	4642      	mov	r2, r8
 8000612:	2a02      	cmp	r2, #2
 8000614:	dc23      	bgt.n	800065e <__aeabi_fmul+0xae>
 8000616:	3a01      	subs	r2, #1
 8000618:	2a01      	cmp	r2, #1
 800061a:	d900      	bls.n	800061e <__aeabi_fmul+0x6e>
 800061c:	e0bd      	b.n	800079a <__aeabi_fmul+0x1ea>
 800061e:	2902      	cmp	r1, #2
 8000620:	d06e      	beq.n	8000700 <__aeabi_fmul+0x150>
 8000622:	2901      	cmp	r1, #1
 8000624:	d12c      	bne.n	8000680 <__aeabi_fmul+0xd0>
 8000626:	2000      	movs	r0, #0
 8000628:	2200      	movs	r2, #0
 800062a:	05c0      	lsls	r0, r0, #23
 800062c:	07f6      	lsls	r6, r6, #31
 800062e:	4310      	orrs	r0, r2
 8000630:	4330      	orrs	r0, r6
 8000632:	bce0      	pop	{r5, r6, r7}
 8000634:	46ba      	mov	sl, r7
 8000636:	46b1      	mov	r9, r6
 8000638:	46a8      	mov	r8, r5
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063c:	002b      	movs	r3, r5
 800063e:	33ff      	adds	r3, #255	@ 0xff
 8000640:	2c00      	cmp	r4, #0
 8000642:	d065      	beq.n	8000710 <__aeabi_fmul+0x160>
 8000644:	2203      	movs	r2, #3
 8000646:	4641      	mov	r1, r8
 8000648:	4311      	orrs	r1, r2
 800064a:	0032      	movs	r2, r6
 800064c:	3501      	adds	r5, #1
 800064e:	4688      	mov	r8, r1
 8000650:	407a      	eors	r2, r7
 8000652:	35ff      	adds	r5, #255	@ 0xff
 8000654:	290a      	cmp	r1, #10
 8000656:	dd00      	ble.n	800065a <__aeabi_fmul+0xaa>
 8000658:	e0d8      	b.n	800080c <__aeabi_fmul+0x25c>
 800065a:	0016      	movs	r6, r2
 800065c:	2103      	movs	r1, #3
 800065e:	4640      	mov	r0, r8
 8000660:	2201      	movs	r2, #1
 8000662:	4082      	lsls	r2, r0
 8000664:	20a6      	movs	r0, #166	@ 0xa6
 8000666:	00c0      	lsls	r0, r0, #3
 8000668:	4202      	tst	r2, r0
 800066a:	d020      	beq.n	80006ae <__aeabi_fmul+0xfe>
 800066c:	4653      	mov	r3, sl
 800066e:	2b02      	cmp	r3, #2
 8000670:	d046      	beq.n	8000700 <__aeabi_fmul+0x150>
 8000672:	2b03      	cmp	r3, #3
 8000674:	d100      	bne.n	8000678 <__aeabi_fmul+0xc8>
 8000676:	e0bb      	b.n	80007f0 <__aeabi_fmul+0x240>
 8000678:	4651      	mov	r1, sl
 800067a:	464c      	mov	r4, r9
 800067c:	2901      	cmp	r1, #1
 800067e:	d0d2      	beq.n	8000626 <__aeabi_fmul+0x76>
 8000680:	002b      	movs	r3, r5
 8000682:	337f      	adds	r3, #127	@ 0x7f
 8000684:	2b00      	cmp	r3, #0
 8000686:	dd70      	ble.n	800076a <__aeabi_fmul+0x1ba>
 8000688:	0762      	lsls	r2, r4, #29
 800068a:	d004      	beq.n	8000696 <__aeabi_fmul+0xe6>
 800068c:	220f      	movs	r2, #15
 800068e:	4022      	ands	r2, r4
 8000690:	2a04      	cmp	r2, #4
 8000692:	d000      	beq.n	8000696 <__aeabi_fmul+0xe6>
 8000694:	3404      	adds	r4, #4
 8000696:	0122      	lsls	r2, r4, #4
 8000698:	d503      	bpl.n	80006a2 <__aeabi_fmul+0xf2>
 800069a:	4b63      	ldr	r3, [pc, #396]	@ (8000828 <__aeabi_fmul+0x278>)
 800069c:	401c      	ands	r4, r3
 800069e:	002b      	movs	r3, r5
 80006a0:	3380      	adds	r3, #128	@ 0x80
 80006a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80006a4:	dc2c      	bgt.n	8000700 <__aeabi_fmul+0x150>
 80006a6:	01a2      	lsls	r2, r4, #6
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	e7bd      	b.n	800062a <__aeabi_fmul+0x7a>
 80006ae:	2090      	movs	r0, #144	@ 0x90
 80006b0:	0080      	lsls	r0, r0, #2
 80006b2:	4202      	tst	r2, r0
 80006b4:	d127      	bne.n	8000706 <__aeabi_fmul+0x156>
 80006b6:	38b9      	subs	r0, #185	@ 0xb9
 80006b8:	38ff      	subs	r0, #255	@ 0xff
 80006ba:	4210      	tst	r0, r2
 80006bc:	d06d      	beq.n	800079a <__aeabi_fmul+0x1ea>
 80006be:	003e      	movs	r6, r7
 80006c0:	46a1      	mov	r9, r4
 80006c2:	468a      	mov	sl, r1
 80006c4:	e7d2      	b.n	800066c <__aeabi_fmul+0xbc>
 80006c6:	2c00      	cmp	r4, #0
 80006c8:	d141      	bne.n	800074e <__aeabi_fmul+0x19e>
 80006ca:	2301      	movs	r3, #1
 80006cc:	4642      	mov	r2, r8
 80006ce:	431a      	orrs	r2, r3
 80006d0:	4690      	mov	r8, r2
 80006d2:	002b      	movs	r3, r5
 80006d4:	4642      	mov	r2, r8
 80006d6:	2101      	movs	r1, #1
 80006d8:	1c5d      	adds	r5, r3, #1
 80006da:	2a0a      	cmp	r2, #10
 80006dc:	dd97      	ble.n	800060e <__aeabi_fmul+0x5e>
 80006de:	e7c5      	b.n	800066c <__aeabi_fmul+0xbc>
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d126      	bne.n	8000732 <__aeabi_fmul+0x182>
 80006e4:	2304      	movs	r3, #4
 80006e6:	4698      	mov	r8, r3
 80006e8:	3b03      	subs	r3, #3
 80006ea:	2500      	movs	r5, #0
 80006ec:	469a      	mov	sl, r3
 80006ee:	e77a      	b.n	80005e6 <__aeabi_fmul+0x36>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d118      	bne.n	8000726 <__aeabi_fmul+0x176>
 80006f4:	2308      	movs	r3, #8
 80006f6:	4698      	mov	r8, r3
 80006f8:	3b06      	subs	r3, #6
 80006fa:	25ff      	movs	r5, #255	@ 0xff
 80006fc:	469a      	mov	sl, r3
 80006fe:	e772      	b.n	80005e6 <__aeabi_fmul+0x36>
 8000700:	20ff      	movs	r0, #255	@ 0xff
 8000702:	2200      	movs	r2, #0
 8000704:	e791      	b.n	800062a <__aeabi_fmul+0x7a>
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	2600      	movs	r6, #0
 800070a:	20ff      	movs	r0, #255	@ 0xff
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	e78c      	b.n	800062a <__aeabi_fmul+0x7a>
 8000710:	4641      	mov	r1, r8
 8000712:	2202      	movs	r2, #2
 8000714:	3501      	adds	r5, #1
 8000716:	4311      	orrs	r1, r2
 8000718:	4688      	mov	r8, r1
 800071a:	35ff      	adds	r5, #255	@ 0xff
 800071c:	290a      	cmp	r1, #10
 800071e:	dca5      	bgt.n	800066c <__aeabi_fmul+0xbc>
 8000720:	2102      	movs	r1, #2
 8000722:	407e      	eors	r6, r7
 8000724:	e774      	b.n	8000610 <__aeabi_fmul+0x60>
 8000726:	230c      	movs	r3, #12
 8000728:	4698      	mov	r8, r3
 800072a:	3b09      	subs	r3, #9
 800072c:	25ff      	movs	r5, #255	@ 0xff
 800072e:	469a      	mov	sl, r3
 8000730:	e759      	b.n	80005e6 <__aeabi_fmul+0x36>
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fa38 	bl	8000ba8 <__clzsi2>
 8000738:	464a      	mov	r2, r9
 800073a:	1f43      	subs	r3, r0, #5
 800073c:	2576      	movs	r5, #118	@ 0x76
 800073e:	409a      	lsls	r2, r3
 8000740:	2300      	movs	r3, #0
 8000742:	426d      	negs	r5, r5
 8000744:	4691      	mov	r9, r2
 8000746:	4698      	mov	r8, r3
 8000748:	469a      	mov	sl, r3
 800074a:	1a2d      	subs	r5, r5, r0
 800074c:	e74b      	b.n	80005e6 <__aeabi_fmul+0x36>
 800074e:	0020      	movs	r0, r4
 8000750:	f000 fa2a 	bl	8000ba8 <__clzsi2>
 8000754:	4642      	mov	r2, r8
 8000756:	1f43      	subs	r3, r0, #5
 8000758:	409c      	lsls	r4, r3
 800075a:	1a2b      	subs	r3, r5, r0
 800075c:	3b76      	subs	r3, #118	@ 0x76
 800075e:	2100      	movs	r1, #0
 8000760:	1c5d      	adds	r5, r3, #1
 8000762:	2a0a      	cmp	r2, #10
 8000764:	dc00      	bgt.n	8000768 <__aeabi_fmul+0x1b8>
 8000766:	e752      	b.n	800060e <__aeabi_fmul+0x5e>
 8000768:	e780      	b.n	800066c <__aeabi_fmul+0xbc>
 800076a:	2201      	movs	r2, #1
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	2b1b      	cmp	r3, #27
 8000770:	dd00      	ble.n	8000774 <__aeabi_fmul+0x1c4>
 8000772:	e758      	b.n	8000626 <__aeabi_fmul+0x76>
 8000774:	359e      	adds	r5, #158	@ 0x9e
 8000776:	0022      	movs	r2, r4
 8000778:	40ac      	lsls	r4, r5
 800077a:	40da      	lsrs	r2, r3
 800077c:	1e63      	subs	r3, r4, #1
 800077e:	419c      	sbcs	r4, r3
 8000780:	4322      	orrs	r2, r4
 8000782:	0753      	lsls	r3, r2, #29
 8000784:	d004      	beq.n	8000790 <__aeabi_fmul+0x1e0>
 8000786:	230f      	movs	r3, #15
 8000788:	4013      	ands	r3, r2
 800078a:	2b04      	cmp	r3, #4
 800078c:	d000      	beq.n	8000790 <__aeabi_fmul+0x1e0>
 800078e:	3204      	adds	r2, #4
 8000790:	0153      	lsls	r3, r2, #5
 8000792:	d537      	bpl.n	8000804 <__aeabi_fmul+0x254>
 8000794:	2001      	movs	r0, #1
 8000796:	2200      	movs	r2, #0
 8000798:	e747      	b.n	800062a <__aeabi_fmul+0x7a>
 800079a:	0c21      	lsrs	r1, r4, #16
 800079c:	464a      	mov	r2, r9
 800079e:	0424      	lsls	r4, r4, #16
 80007a0:	0c24      	lsrs	r4, r4, #16
 80007a2:	0027      	movs	r7, r4
 80007a4:	0c10      	lsrs	r0, r2, #16
 80007a6:	0412      	lsls	r2, r2, #16
 80007a8:	0c12      	lsrs	r2, r2, #16
 80007aa:	4344      	muls	r4, r0
 80007ac:	4357      	muls	r7, r2
 80007ae:	4348      	muls	r0, r1
 80007b0:	4351      	muls	r1, r2
 80007b2:	0c3a      	lsrs	r2, r7, #16
 80007b4:	1909      	adds	r1, r1, r4
 80007b6:	1852      	adds	r2, r2, r1
 80007b8:	4294      	cmp	r4, r2
 80007ba:	d903      	bls.n	80007c4 <__aeabi_fmul+0x214>
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	0249      	lsls	r1, r1, #9
 80007c0:	468c      	mov	ip, r1
 80007c2:	4460      	add	r0, ip
 80007c4:	043f      	lsls	r7, r7, #16
 80007c6:	0411      	lsls	r1, r2, #16
 80007c8:	0c3f      	lsrs	r7, r7, #16
 80007ca:	19c9      	adds	r1, r1, r7
 80007cc:	018c      	lsls	r4, r1, #6
 80007ce:	1e67      	subs	r7, r4, #1
 80007d0:	41bc      	sbcs	r4, r7
 80007d2:	0c12      	lsrs	r2, r2, #16
 80007d4:	0e89      	lsrs	r1, r1, #26
 80007d6:	1812      	adds	r2, r2, r0
 80007d8:	430c      	orrs	r4, r1
 80007da:	0192      	lsls	r2, r2, #6
 80007dc:	4314      	orrs	r4, r2
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	d50e      	bpl.n	8000800 <__aeabi_fmul+0x250>
 80007e2:	2301      	movs	r3, #1
 80007e4:	0862      	lsrs	r2, r4, #1
 80007e6:	401c      	ands	r4, r3
 80007e8:	4314      	orrs	r4, r2
 80007ea:	e749      	b.n	8000680 <__aeabi_fmul+0xd0>
 80007ec:	003e      	movs	r6, r7
 80007ee:	46a1      	mov	r9, r4
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	464b      	mov	r3, r9
 80007f4:	03d2      	lsls	r2, r2, #15
 80007f6:	431a      	orrs	r2, r3
 80007f8:	0252      	lsls	r2, r2, #9
 80007fa:	20ff      	movs	r0, #255	@ 0xff
 80007fc:	0a52      	lsrs	r2, r2, #9
 80007fe:	e714      	b.n	800062a <__aeabi_fmul+0x7a>
 8000800:	001d      	movs	r5, r3
 8000802:	e73d      	b.n	8000680 <__aeabi_fmul+0xd0>
 8000804:	0192      	lsls	r2, r2, #6
 8000806:	2000      	movs	r0, #0
 8000808:	0a52      	lsrs	r2, r2, #9
 800080a:	e70e      	b.n	800062a <__aeabi_fmul+0x7a>
 800080c:	290f      	cmp	r1, #15
 800080e:	d1ed      	bne.n	80007ec <__aeabi_fmul+0x23c>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	464b      	mov	r3, r9
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4213      	tst	r3, r2
 8000818:	d0ea      	beq.n	80007f0 <__aeabi_fmul+0x240>
 800081a:	4214      	tst	r4, r2
 800081c:	d1e8      	bne.n	80007f0 <__aeabi_fmul+0x240>
 800081e:	003e      	movs	r6, r7
 8000820:	20ff      	movs	r0, #255	@ 0xff
 8000822:	4322      	orrs	r2, r4
 8000824:	e701      	b.n	800062a <__aeabi_fmul+0x7a>
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	f7ffffff 	.word	0xf7ffffff

0800082c <__aeabi_i2f>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	2800      	cmp	r0, #0
 8000830:	d013      	beq.n	800085a <__aeabi_i2f+0x2e>
 8000832:	17c3      	asrs	r3, r0, #31
 8000834:	18c5      	adds	r5, r0, r3
 8000836:	405d      	eors	r5, r3
 8000838:	0fc4      	lsrs	r4, r0, #31
 800083a:	0028      	movs	r0, r5
 800083c:	f000 f9b4 	bl	8000ba8 <__clzsi2>
 8000840:	239e      	movs	r3, #158	@ 0x9e
 8000842:	0001      	movs	r1, r0
 8000844:	1a1b      	subs	r3, r3, r0
 8000846:	2b96      	cmp	r3, #150	@ 0x96
 8000848:	dc0f      	bgt.n	800086a <__aeabi_i2f+0x3e>
 800084a:	2808      	cmp	r0, #8
 800084c:	d034      	beq.n	80008b8 <__aeabi_i2f+0x8c>
 800084e:	3908      	subs	r1, #8
 8000850:	408d      	lsls	r5, r1
 8000852:	026d      	lsls	r5, r5, #9
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	b2d8      	uxtb	r0, r3
 8000858:	e002      	b.n	8000860 <__aeabi_i2f+0x34>
 800085a:	2400      	movs	r4, #0
 800085c:	2000      	movs	r0, #0
 800085e:	2500      	movs	r5, #0
 8000860:	05c0      	lsls	r0, r0, #23
 8000862:	4328      	orrs	r0, r5
 8000864:	07e4      	lsls	r4, r4, #31
 8000866:	4320      	orrs	r0, r4
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	2b99      	cmp	r3, #153	@ 0x99
 800086c:	dc16      	bgt.n	800089c <__aeabi_i2f+0x70>
 800086e:	1f42      	subs	r2, r0, #5
 8000870:	2805      	cmp	r0, #5
 8000872:	d000      	beq.n	8000876 <__aeabi_i2f+0x4a>
 8000874:	4095      	lsls	r5, r2
 8000876:	002a      	movs	r2, r5
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <__aeabi_i2f+0x94>)
 800087a:	4002      	ands	r2, r0
 800087c:	076e      	lsls	r6, r5, #29
 800087e:	d009      	beq.n	8000894 <__aeabi_i2f+0x68>
 8000880:	260f      	movs	r6, #15
 8000882:	4035      	ands	r5, r6
 8000884:	2d04      	cmp	r5, #4
 8000886:	d005      	beq.n	8000894 <__aeabi_i2f+0x68>
 8000888:	3204      	adds	r2, #4
 800088a:	0155      	lsls	r5, r2, #5
 800088c:	d502      	bpl.n	8000894 <__aeabi_i2f+0x68>
 800088e:	239f      	movs	r3, #159	@ 0x9f
 8000890:	4002      	ands	r2, r0
 8000892:	1a5b      	subs	r3, r3, r1
 8000894:	0192      	lsls	r2, r2, #6
 8000896:	0a55      	lsrs	r5, r2, #9
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	e7e1      	b.n	8000860 <__aeabi_i2f+0x34>
 800089c:	2205      	movs	r2, #5
 800089e:	1a12      	subs	r2, r2, r0
 80008a0:	0028      	movs	r0, r5
 80008a2:	40d0      	lsrs	r0, r2
 80008a4:	0002      	movs	r2, r0
 80008a6:	0008      	movs	r0, r1
 80008a8:	301b      	adds	r0, #27
 80008aa:	4085      	lsls	r5, r0
 80008ac:	0028      	movs	r0, r5
 80008ae:	1e45      	subs	r5, r0, #1
 80008b0:	41a8      	sbcs	r0, r5
 80008b2:	4302      	orrs	r2, r0
 80008b4:	0015      	movs	r5, r2
 80008b6:	e7de      	b.n	8000876 <__aeabi_i2f+0x4a>
 80008b8:	026d      	lsls	r5, r5, #9
 80008ba:	2096      	movs	r0, #150	@ 0x96
 80008bc:	0a6d      	lsrs	r5, r5, #9
 80008be:	e7cf      	b.n	8000860 <__aeabi_i2f+0x34>
 80008c0:	fbffffff 	.word	0xfbffffff

080008c4 <__eqdf2>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	4657      	mov	r7, sl
 80008c8:	46de      	mov	lr, fp
 80008ca:	464e      	mov	r6, r9
 80008cc:	4645      	mov	r5, r8
 80008ce:	b5e0      	push	{r5, r6, r7, lr}
 80008d0:	000d      	movs	r5, r1
 80008d2:	0004      	movs	r4, r0
 80008d4:	0fe8      	lsrs	r0, r5, #31
 80008d6:	4683      	mov	fp, r0
 80008d8:	0309      	lsls	r1, r1, #12
 80008da:	0fd8      	lsrs	r0, r3, #31
 80008dc:	0b09      	lsrs	r1, r1, #12
 80008de:	4682      	mov	sl, r0
 80008e0:	4819      	ldr	r0, [pc, #100]	@ (8000948 <__eqdf2+0x84>)
 80008e2:	468c      	mov	ip, r1
 80008e4:	031f      	lsls	r7, r3, #12
 80008e6:	0069      	lsls	r1, r5, #1
 80008e8:	005e      	lsls	r6, r3, #1
 80008ea:	0d49      	lsrs	r1, r1, #21
 80008ec:	0b3f      	lsrs	r7, r7, #12
 80008ee:	0d76      	lsrs	r6, r6, #21
 80008f0:	4281      	cmp	r1, r0
 80008f2:	d018      	beq.n	8000926 <__eqdf2+0x62>
 80008f4:	4286      	cmp	r6, r0
 80008f6:	d00f      	beq.n	8000918 <__eqdf2+0x54>
 80008f8:	2001      	movs	r0, #1
 80008fa:	42b1      	cmp	r1, r6
 80008fc:	d10d      	bne.n	800091a <__eqdf2+0x56>
 80008fe:	45bc      	cmp	ip, r7
 8000900:	d10b      	bne.n	800091a <__eqdf2+0x56>
 8000902:	4294      	cmp	r4, r2
 8000904:	d109      	bne.n	800091a <__eqdf2+0x56>
 8000906:	45d3      	cmp	fp, sl
 8000908:	d01c      	beq.n	8000944 <__eqdf2+0x80>
 800090a:	2900      	cmp	r1, #0
 800090c:	d105      	bne.n	800091a <__eqdf2+0x56>
 800090e:	4660      	mov	r0, ip
 8000910:	4320      	orrs	r0, r4
 8000912:	1e43      	subs	r3, r0, #1
 8000914:	4198      	sbcs	r0, r3
 8000916:	e000      	b.n	800091a <__eqdf2+0x56>
 8000918:	2001      	movs	r0, #1
 800091a:	bcf0      	pop	{r4, r5, r6, r7}
 800091c:	46bb      	mov	fp, r7
 800091e:	46b2      	mov	sl, r6
 8000920:	46a9      	mov	r9, r5
 8000922:	46a0      	mov	r8, r4
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	2001      	movs	r0, #1
 8000928:	428e      	cmp	r6, r1
 800092a:	d1f6      	bne.n	800091a <__eqdf2+0x56>
 800092c:	4661      	mov	r1, ip
 800092e:	4339      	orrs	r1, r7
 8000930:	000f      	movs	r7, r1
 8000932:	4317      	orrs	r7, r2
 8000934:	4327      	orrs	r7, r4
 8000936:	d1f0      	bne.n	800091a <__eqdf2+0x56>
 8000938:	465b      	mov	r3, fp
 800093a:	4652      	mov	r2, sl
 800093c:	1a98      	subs	r0, r3, r2
 800093e:	1e43      	subs	r3, r0, #1
 8000940:	4198      	sbcs	r0, r3
 8000942:	e7ea      	b.n	800091a <__eqdf2+0x56>
 8000944:	2000      	movs	r0, #0
 8000946:	e7e8      	b.n	800091a <__eqdf2+0x56>
 8000948:	000007ff 	.word	0x000007ff

0800094c <__gedf2>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	4657      	mov	r7, sl
 8000950:	464e      	mov	r6, r9
 8000952:	4645      	mov	r5, r8
 8000954:	46de      	mov	lr, fp
 8000956:	b5e0      	push	{r5, r6, r7, lr}
 8000958:	000d      	movs	r5, r1
 800095a:	030f      	lsls	r7, r1, #12
 800095c:	0b39      	lsrs	r1, r7, #12
 800095e:	b083      	sub	sp, #12
 8000960:	0004      	movs	r4, r0
 8000962:	4680      	mov	r8, r0
 8000964:	9101      	str	r1, [sp, #4]
 8000966:	0058      	lsls	r0, r3, #1
 8000968:	0fe9      	lsrs	r1, r5, #31
 800096a:	4f31      	ldr	r7, [pc, #196]	@ (8000a30 <__gedf2+0xe4>)
 800096c:	0d40      	lsrs	r0, r0, #21
 800096e:	468c      	mov	ip, r1
 8000970:	006e      	lsls	r6, r5, #1
 8000972:	0319      	lsls	r1, r3, #12
 8000974:	4682      	mov	sl, r0
 8000976:	4691      	mov	r9, r2
 8000978:	0d76      	lsrs	r6, r6, #21
 800097a:	0b09      	lsrs	r1, r1, #12
 800097c:	0fd8      	lsrs	r0, r3, #31
 800097e:	42be      	cmp	r6, r7
 8000980:	d01f      	beq.n	80009c2 <__gedf2+0x76>
 8000982:	45ba      	cmp	sl, r7
 8000984:	d00f      	beq.n	80009a6 <__gedf2+0x5a>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d12f      	bne.n	80009ea <__gedf2+0x9e>
 800098a:	4655      	mov	r5, sl
 800098c:	9e01      	ldr	r6, [sp, #4]
 800098e:	4334      	orrs	r4, r6
 8000990:	2d00      	cmp	r5, #0
 8000992:	d127      	bne.n	80009e4 <__gedf2+0x98>
 8000994:	430a      	orrs	r2, r1
 8000996:	d03a      	beq.n	8000a0e <__gedf2+0xc2>
 8000998:	2c00      	cmp	r4, #0
 800099a:	d145      	bne.n	8000a28 <__gedf2+0xdc>
 800099c:	2800      	cmp	r0, #0
 800099e:	d11a      	bne.n	80009d6 <__gedf2+0x8a>
 80009a0:	2001      	movs	r0, #1
 80009a2:	4240      	negs	r0, r0
 80009a4:	e017      	b.n	80009d6 <__gedf2+0x8a>
 80009a6:	4311      	orrs	r1, r2
 80009a8:	d13b      	bne.n	8000a22 <__gedf2+0xd6>
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d102      	bne.n	80009b4 <__gedf2+0x68>
 80009ae:	9f01      	ldr	r7, [sp, #4]
 80009b0:	4327      	orrs	r7, r4
 80009b2:	d0f3      	beq.n	800099c <__gedf2+0x50>
 80009b4:	4584      	cmp	ip, r0
 80009b6:	d109      	bne.n	80009cc <__gedf2+0x80>
 80009b8:	4663      	mov	r3, ip
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f0      	beq.n	80009a0 <__gedf2+0x54>
 80009be:	4660      	mov	r0, ip
 80009c0:	e009      	b.n	80009d6 <__gedf2+0x8a>
 80009c2:	9f01      	ldr	r7, [sp, #4]
 80009c4:	4327      	orrs	r7, r4
 80009c6:	d12c      	bne.n	8000a22 <__gedf2+0xd6>
 80009c8:	45b2      	cmp	sl, r6
 80009ca:	d024      	beq.n	8000a16 <__gedf2+0xca>
 80009cc:	4663      	mov	r3, ip
 80009ce:	2002      	movs	r0, #2
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4018      	ands	r0, r3
 80009d4:	3801      	subs	r0, #1
 80009d6:	b003      	add	sp, #12
 80009d8:	bcf0      	pop	{r4, r5, r6, r7}
 80009da:	46bb      	mov	fp, r7
 80009dc:	46b2      	mov	sl, r6
 80009de:	46a9      	mov	r9, r5
 80009e0:	46a0      	mov	r8, r4
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d0d9      	beq.n	800099c <__gedf2+0x50>
 80009e8:	e7e4      	b.n	80009b4 <__gedf2+0x68>
 80009ea:	4654      	mov	r4, sl
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d0ed      	beq.n	80009cc <__gedf2+0x80>
 80009f0:	4584      	cmp	ip, r0
 80009f2:	d1eb      	bne.n	80009cc <__gedf2+0x80>
 80009f4:	4556      	cmp	r6, sl
 80009f6:	dce9      	bgt.n	80009cc <__gedf2+0x80>
 80009f8:	dbde      	blt.n	80009b8 <__gedf2+0x6c>
 80009fa:	9b01      	ldr	r3, [sp, #4]
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d8e5      	bhi.n	80009cc <__gedf2+0x80>
 8000a00:	d1da      	bne.n	80009b8 <__gedf2+0x6c>
 8000a02:	45c8      	cmp	r8, r9
 8000a04:	d8e2      	bhi.n	80009cc <__gedf2+0x80>
 8000a06:	2000      	movs	r0, #0
 8000a08:	45c8      	cmp	r8, r9
 8000a0a:	d2e4      	bcs.n	80009d6 <__gedf2+0x8a>
 8000a0c:	e7d4      	b.n	80009b8 <__gedf2+0x6c>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	2c00      	cmp	r4, #0
 8000a12:	d0e0      	beq.n	80009d6 <__gedf2+0x8a>
 8000a14:	e7da      	b.n	80009cc <__gedf2+0x80>
 8000a16:	4311      	orrs	r1, r2
 8000a18:	d103      	bne.n	8000a22 <__gedf2+0xd6>
 8000a1a:	4584      	cmp	ip, r0
 8000a1c:	d1d6      	bne.n	80009cc <__gedf2+0x80>
 8000a1e:	2000      	movs	r0, #0
 8000a20:	e7d9      	b.n	80009d6 <__gedf2+0x8a>
 8000a22:	2002      	movs	r0, #2
 8000a24:	4240      	negs	r0, r0
 8000a26:	e7d6      	b.n	80009d6 <__gedf2+0x8a>
 8000a28:	4584      	cmp	ip, r0
 8000a2a:	d0e6      	beq.n	80009fa <__gedf2+0xae>
 8000a2c:	e7ce      	b.n	80009cc <__gedf2+0x80>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	000007ff 	.word	0x000007ff

08000a34 <__ledf2>:
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	4657      	mov	r7, sl
 8000a38:	464e      	mov	r6, r9
 8000a3a:	4645      	mov	r5, r8
 8000a3c:	46de      	mov	lr, fp
 8000a3e:	b5e0      	push	{r5, r6, r7, lr}
 8000a40:	000d      	movs	r5, r1
 8000a42:	030f      	lsls	r7, r1, #12
 8000a44:	0004      	movs	r4, r0
 8000a46:	4680      	mov	r8, r0
 8000a48:	0fe8      	lsrs	r0, r5, #31
 8000a4a:	0b39      	lsrs	r1, r7, #12
 8000a4c:	4684      	mov	ip, r0
 8000a4e:	b083      	sub	sp, #12
 8000a50:	0058      	lsls	r0, r3, #1
 8000a52:	4f30      	ldr	r7, [pc, #192]	@ (8000b14 <__ledf2+0xe0>)
 8000a54:	0d40      	lsrs	r0, r0, #21
 8000a56:	9101      	str	r1, [sp, #4]
 8000a58:	031e      	lsls	r6, r3, #12
 8000a5a:	0069      	lsls	r1, r5, #1
 8000a5c:	4682      	mov	sl, r0
 8000a5e:	4691      	mov	r9, r2
 8000a60:	0d49      	lsrs	r1, r1, #21
 8000a62:	0b36      	lsrs	r6, r6, #12
 8000a64:	0fd8      	lsrs	r0, r3, #31
 8000a66:	42b9      	cmp	r1, r7
 8000a68:	d020      	beq.n	8000aac <__ledf2+0x78>
 8000a6a:	45ba      	cmp	sl, r7
 8000a6c:	d00f      	beq.n	8000a8e <__ledf2+0x5a>
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	d12b      	bne.n	8000aca <__ledf2+0x96>
 8000a72:	9901      	ldr	r1, [sp, #4]
 8000a74:	430c      	orrs	r4, r1
 8000a76:	4651      	mov	r1, sl
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d137      	bne.n	8000aec <__ledf2+0xb8>
 8000a7c:	4332      	orrs	r2, r6
 8000a7e:	d038      	beq.n	8000af2 <__ledf2+0xbe>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d144      	bne.n	8000b0e <__ledf2+0xda>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d119      	bne.n	8000abc <__ledf2+0x88>
 8000a88:	2001      	movs	r0, #1
 8000a8a:	4240      	negs	r0, r0
 8000a8c:	e016      	b.n	8000abc <__ledf2+0x88>
 8000a8e:	4316      	orrs	r6, r2
 8000a90:	d113      	bne.n	8000aba <__ledf2+0x86>
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d102      	bne.n	8000a9c <__ledf2+0x68>
 8000a96:	9f01      	ldr	r7, [sp, #4]
 8000a98:	4327      	orrs	r7, r4
 8000a9a:	d0f3      	beq.n	8000a84 <__ledf2+0x50>
 8000a9c:	4584      	cmp	ip, r0
 8000a9e:	d020      	beq.n	8000ae2 <__ledf2+0xae>
 8000aa0:	4663      	mov	r3, ip
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	4018      	ands	r0, r3
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	e007      	b.n	8000abc <__ledf2+0x88>
 8000aac:	9f01      	ldr	r7, [sp, #4]
 8000aae:	4327      	orrs	r7, r4
 8000ab0:	d103      	bne.n	8000aba <__ledf2+0x86>
 8000ab2:	458a      	cmp	sl, r1
 8000ab4:	d1f4      	bne.n	8000aa0 <__ledf2+0x6c>
 8000ab6:	4316      	orrs	r6, r2
 8000ab8:	d01f      	beq.n	8000afa <__ledf2+0xc6>
 8000aba:	2002      	movs	r0, #2
 8000abc:	b003      	add	sp, #12
 8000abe:	bcf0      	pop	{r4, r5, r6, r7}
 8000ac0:	46bb      	mov	fp, r7
 8000ac2:	46b2      	mov	sl, r6
 8000ac4:	46a9      	mov	r9, r5
 8000ac6:	46a0      	mov	r8, r4
 8000ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aca:	4654      	mov	r4, sl
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d0e7      	beq.n	8000aa0 <__ledf2+0x6c>
 8000ad0:	4584      	cmp	ip, r0
 8000ad2:	d1e5      	bne.n	8000aa0 <__ledf2+0x6c>
 8000ad4:	4551      	cmp	r1, sl
 8000ad6:	dce3      	bgt.n	8000aa0 <__ledf2+0x6c>
 8000ad8:	db03      	blt.n	8000ae2 <__ledf2+0xae>
 8000ada:	9b01      	ldr	r3, [sp, #4]
 8000adc:	42b3      	cmp	r3, r6
 8000ade:	d8df      	bhi.n	8000aa0 <__ledf2+0x6c>
 8000ae0:	d00f      	beq.n	8000b02 <__ledf2+0xce>
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0cf      	beq.n	8000a88 <__ledf2+0x54>
 8000ae8:	4660      	mov	r0, ip
 8000aea:	e7e7      	b.n	8000abc <__ledf2+0x88>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d0c9      	beq.n	8000a84 <__ledf2+0x50>
 8000af0:	e7d4      	b.n	8000a9c <__ledf2+0x68>
 8000af2:	2000      	movs	r0, #0
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d0e1      	beq.n	8000abc <__ledf2+0x88>
 8000af8:	e7d2      	b.n	8000aa0 <__ledf2+0x6c>
 8000afa:	4584      	cmp	ip, r0
 8000afc:	d1d0      	bne.n	8000aa0 <__ledf2+0x6c>
 8000afe:	2000      	movs	r0, #0
 8000b00:	e7dc      	b.n	8000abc <__ledf2+0x88>
 8000b02:	45c8      	cmp	r8, r9
 8000b04:	d8cc      	bhi.n	8000aa0 <__ledf2+0x6c>
 8000b06:	2000      	movs	r0, #0
 8000b08:	45c8      	cmp	r8, r9
 8000b0a:	d2d7      	bcs.n	8000abc <__ledf2+0x88>
 8000b0c:	e7e9      	b.n	8000ae2 <__ledf2+0xae>
 8000b0e:	4584      	cmp	ip, r0
 8000b10:	d0e3      	beq.n	8000ada <__ledf2+0xa6>
 8000b12:	e7c5      	b.n	8000aa0 <__ledf2+0x6c>
 8000b14:	000007ff 	.word	0x000007ff

08000b18 <__aeabi_f2d>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	0242      	lsls	r2, r0, #9
 8000b1c:	0043      	lsls	r3, r0, #1
 8000b1e:	0fc4      	lsrs	r4, r0, #31
 8000b20:	20fe      	movs	r0, #254	@ 0xfe
 8000b22:	0e1b      	lsrs	r3, r3, #24
 8000b24:	1c59      	adds	r1, r3, #1
 8000b26:	0a55      	lsrs	r5, r2, #9
 8000b28:	4208      	tst	r0, r1
 8000b2a:	d00c      	beq.n	8000b46 <__aeabi_f2d+0x2e>
 8000b2c:	21e0      	movs	r1, #224	@ 0xe0
 8000b2e:	0089      	lsls	r1, r1, #2
 8000b30:	468c      	mov	ip, r1
 8000b32:	076d      	lsls	r5, r5, #29
 8000b34:	0b12      	lsrs	r2, r2, #12
 8000b36:	4463      	add	r3, ip
 8000b38:	051b      	lsls	r3, r3, #20
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	07e4      	lsls	r4, r4, #31
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	0028      	movs	r0, r5
 8000b42:	0019      	movs	r1, r3
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d114      	bne.n	8000b74 <__aeabi_f2d+0x5c>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d01b      	beq.n	8000b86 <__aeabi_f2d+0x6e>
 8000b4e:	0028      	movs	r0, r5
 8000b50:	f000 f82a 	bl	8000ba8 <__clzsi2>
 8000b54:	280a      	cmp	r0, #10
 8000b56:	dc1c      	bgt.n	8000b92 <__aeabi_f2d+0x7a>
 8000b58:	230b      	movs	r3, #11
 8000b5a:	002a      	movs	r2, r5
 8000b5c:	1a1b      	subs	r3, r3, r0
 8000b5e:	40da      	lsrs	r2, r3
 8000b60:	0003      	movs	r3, r0
 8000b62:	3315      	adds	r3, #21
 8000b64:	409d      	lsls	r5, r3
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <__aeabi_f2d+0x88>)
 8000b68:	0312      	lsls	r2, r2, #12
 8000b6a:	1a1b      	subs	r3, r3, r0
 8000b6c:	055b      	lsls	r3, r3, #21
 8000b6e:	0b12      	lsrs	r2, r2, #12
 8000b70:	0d5b      	lsrs	r3, r3, #21
 8000b72:	e7e1      	b.n	8000b38 <__aeabi_f2d+0x20>
 8000b74:	2d00      	cmp	r5, #0
 8000b76:	d009      	beq.n	8000b8c <__aeabi_f2d+0x74>
 8000b78:	0b13      	lsrs	r3, r2, #12
 8000b7a:	2280      	movs	r2, #128	@ 0x80
 8000b7c:	0312      	lsls	r2, r2, #12
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	076d      	lsls	r5, r5, #29
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <__aeabi_f2d+0x8c>)
 8000b84:	e7d8      	b.n	8000b38 <__aeabi_f2d+0x20>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2200      	movs	r2, #0
 8000b8a:	e7d5      	b.n	8000b38 <__aeabi_f2d+0x20>
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <__aeabi_f2d+0x8c>)
 8000b90:	e7d2      	b.n	8000b38 <__aeabi_f2d+0x20>
 8000b92:	0003      	movs	r3, r0
 8000b94:	002a      	movs	r2, r5
 8000b96:	3b0b      	subs	r3, #11
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	e7e3      	b.n	8000b66 <__aeabi_f2d+0x4e>
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	00000389 	.word	0x00000389
 8000ba4:	000007ff 	.word	0x000007ff

08000ba8 <__clzsi2>:
 8000ba8:	211c      	movs	r1, #28
 8000baa:	2301      	movs	r3, #1
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d301      	bcc.n	8000bb6 <__clzsi2+0xe>
 8000bb2:	0c00      	lsrs	r0, r0, #16
 8000bb4:	3910      	subs	r1, #16
 8000bb6:	0a1b      	lsrs	r3, r3, #8
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	d301      	bcc.n	8000bc0 <__clzsi2+0x18>
 8000bbc:	0a00      	lsrs	r0, r0, #8
 8000bbe:	3908      	subs	r1, #8
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d301      	bcc.n	8000bca <__clzsi2+0x22>
 8000bc6:	0900      	lsrs	r0, r0, #4
 8000bc8:	3904      	subs	r1, #4
 8000bca:	a202      	add	r2, pc, #8	@ (adr r2, 8000bd4 <__clzsi2+0x2c>)
 8000bcc:	5c10      	ldrb	r0, [r2, r0]
 8000bce:	1840      	adds	r0, r0, r1
 8000bd0:	4770      	bx	lr
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	02020304 	.word	0x02020304
 8000bd8:	01010101 	.word	0x01010101
	...

08000be4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000be8:	f000 fb3a 	bl	8001260 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bec:	f000 f850 	bl	8000c90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bf0:	f000 f93c 	bl	8000e6c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000bf4:	f000 f8a4 	bl	8000d40 <MX_I2C1_Init>
	MX_TIM3_Init();
 8000bf8:	f000 f8e2 	bl	8000dc0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Start Timer 3 interrupt
	HAL_TIM_Base_Start_IT(&htim3);
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <main+0x94>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 f9c2 	bl	8002f88 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* USER CODE BEGIN WHILE */
	while (1) {
		currentTemperature = MCP9808_GetTemperature();
 8000c04:	f000 f98a 	bl	8000f1c <MCP9808_GetTemperature>
 8000c08:	1c02      	adds	r2, r0, #0
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <main+0x98>)
 8000c0c:	601a      	str	r2, [r3, #0]

		/* check if the temperature exceeds the threshold and timer is not running.
		 * i am using a buffering timer to offset the heating time vs cooling time,
		 * so that the fans don't trigger constantly when the temperature is within the threshold.
		 * all of this depends on how fast the temperature rises vs how fast your fans can cool down. */
		if (currentTemperature >= TEMPERATURE_THRESHOLD && !timerRunning) {
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <main+0x98>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1c18      	adds	r0, r3, #0
 8000c14:	f7ff ff80 	bl	8000b18 <__aeabi_f2d>
 8000c18:	4a19      	ldr	r2, [pc, #100]	@ (8000c80 <main+0x9c>)
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <main+0xa0>)
 8000c1c:	f7ff fb34 	bl	8000288 <__aeabi_dcmpge>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d00e      	beq.n	8000c42 <main+0x5e>
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <main+0xa4>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4053      	eors	r3, r2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <main+0x5e>
			turnFanOn();
 8000c32:	f000 f9d5 	bl	8000fe0 <turnFanOn>
			timerRunning = true;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <main+0xa4>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
			timerCounter = 0;  /* reset the timer counter */
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <main+0xa8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
		}

		/* check if the temperature is below the threshold and timer is done */
		if (currentTemperature < TEMPERATURE_THRESHOLD && !timerRunning) {
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <main+0x98>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1c18      	adds	r0, r3, #0
 8000c48:	f7ff ff66 	bl	8000b18 <__aeabi_f2d>
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <main+0x9c>)
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <main+0xa0>)
 8000c50:	f7ff fafc 	bl	800024c <__aeabi_dcmplt>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d008      	beq.n	8000c6a <main+0x86>
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <main+0xa4>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4053      	eors	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <main+0x86>
			turnFanOff();
 8000c66:	f000 f9cd 	bl	8001004 <turnFanOff>
		}

		HAL_Delay(1000);
 8000c6a:	23fa      	movs	r3, #250	@ 0xfa
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 fb5a 	bl	8001328 <HAL_Delay>
		currentTemperature = MCP9808_GetTemperature();
 8000c74:	e7c6      	b.n	8000c04 <main+0x20>
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	2000007c 	.word	0x2000007c
 8000c7c:	200000c8 	.word	0x200000c8
 8000c80:	d70a3d71 	.word	0xd70a3d71
 8000c84:	403870a3 	.word	0x403870a3
 8000c88:	200000c5 	.word	0x200000c5
 8000c8c:	200000cc 	.word	0x200000cc

08000c90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b095      	sub	sp, #84	@ 0x54
 8000c94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c96:	2420      	movs	r4, #32
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2330      	movs	r3, #48	@ 0x30
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f002 fd0f 	bl	80036c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	0018      	movs	r0, r3
 8000cac:	2310      	movs	r3, #16
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f002 fd07 	bl	80036c4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2310      	movs	r3, #16
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f002 fd00 	bl	80036c4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	0021      	movs	r1, r4
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2202      	movs	r2, #2
 8000cca:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2201      	movs	r2, #1
 8000cd0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fbf5 	bl	80024d0 <HAL_RCC_OscConfig>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x5e>
		Error_Handler();
 8000cea:	f000 f9c5 	bl	8001078 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cee:	2110      	movs	r1, #16
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f001 fef9 	bl	8002b04 <HAL_RCC_ClockConfig>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x8a>
		Error_Handler();
 8000d16:	f000 f9af 	bl	8001078 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d1a:	003b      	movs	r3, r7
 8000d1c:	2220      	movs	r2, #32
 8000d1e:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d20:	003b      	movs	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d26:	003b      	movs	r3, r7
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 f80f 	bl	8002d4c <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0xa6>
		Error_Handler();
 8000d32:	f000 f9a1 	bl	8001078 <Error_Handler>
	}
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b015      	add	sp, #84	@ 0x54
 8000d3c:	bd90      	pop	{r4, r7, pc}
	...

08000d40 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <MX_I2C1_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <MX_I2C1_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f000 fd63 	bl	8001848 <HAL_I2C_Init>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000d86:	f000 f977 	bl	8001078 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fb06 	bl	80023a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000d98:	f000 f96e 	bl	8001078 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <MX_I2C1_Init+0x74>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 fb49 	bl	8002438 <HAL_I2CEx_ConfigDigitalFilter>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000daa:	f000 f965 	bl	8001078 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000028 	.word	0x20000028
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	2000090e 	.word	0x2000090e

08000dc0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2310      	movs	r3, #16
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f002 fc77 	bl	80036c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2308      	movs	r3, #8
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f002 fc70 	bl	80036c4 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000de6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e64 <MX_TIM3_Init+0xa4>)
 8000de8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8000 - 1;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000dec:	4a1e      	ldr	r2, [pc, #120]	@ (8000e68 <MX_TIM3_Init+0xa8>)
 8000dee:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100 - 1;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000df8:	2263      	movs	r2, #99	@ 0x63
 8000dfa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 f86c 	bl	8002ee8 <HAL_TIM_Base_Init>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x58>
		Error_Handler();
 8000e14:	f000 f930 	bl	8001078 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	2108      	movs	r1, #8
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2280      	movs	r2, #128	@ 0x80
 8000e1e:	0152      	lsls	r2, r2, #5
 8000e20:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000e22:	187a      	adds	r2, r7, r1
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 f9e1 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x76>
		Error_Handler();
 8000e32:	f000 f921 	bl	8001078 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e42:	003a      	movs	r2, r7
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_TIM3_Init+0xa0>)
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f002 fbd9 	bl	8003600 <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000e52:	f000 f911 	bl	8001078 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b006      	add	sp, #24
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	2000007c 	.word	0x2000007c
 8000e64:	40000400 	.word	0x40000400
 8000e68:	00001f3f 	.word	0x00001f3f

08000e6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e72:	240c      	movs	r4, #12
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	0018      	movs	r0, r3
 8000e78:	2314      	movs	r3, #20
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f002 fc21 	bl	80036c4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_GPIO_Init+0xa8>)
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <MX_GPIO_Init+0xa8>)
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	0289      	lsls	r1, r1, #10
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <MX_GPIO_Init+0xa8>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_GPIO_Init+0xa8>)
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_GPIO_Init+0xa8>)
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	02c9      	lsls	r1, r1, #11
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_GPIO_Init+0xa8>)
 8000eae:	695a      	ldr	r2, [r3, #20]
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	02db      	lsls	r3, r3, #11
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, STAT_LED_Pin | FAN1_Pin | FAN2_Pin,
 8000eba:	2390      	movs	r3, #144	@ 0x90
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	21e0      	movs	r1, #224	@ 0xe0
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fca2 	bl	800180c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : STAT_LED_Pin FAN1_Pin FAN2_Pin */
	GPIO_InitStruct.Pin = STAT_LED_Pin | FAN1_Pin | FAN2_Pin;
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	22e0      	movs	r2, #224	@ 0xe0
 8000ecc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	193a      	adds	r2, r7, r4
 8000ee2:	2390      	movs	r3, #144	@ 0x90
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fb1f 	bl	800152c <HAL_GPIO_Init>

	/*Configure GPIO pin : ALERT_Pin */
	GPIO_InitStruct.Pin = ALERT_Pin;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ALERT_GPIO_Port, &GPIO_InitStruct);
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <MX_GPIO_Init+0xac>)
 8000f04:	0019      	movs	r1, r3
 8000f06:	0010      	movs	r0, r2
 8000f08:	f000 fb10 	bl	800152c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b009      	add	sp, #36	@ 0x24
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000400 	.word	0x48000400

08000f1c <MCP9808_GetTemperature>:
 * @brief Get the MCP9808 temperature reading in Celsius. This code is taken from
 * https://embeddedespresso.com/temperature-measurement-never-so-easy-with-stm32-and-mcp9808/
 * and wrapped into a function
 * @retval Float
 */
float MCP9808_GetTemperature() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
	uint8_t tempReg = 0x05u; /* Temperature register address */
 8000f22:	2109      	movs	r1, #9
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2205      	movs	r2, #5
 8000f28:	701a      	strb	r2, [r3, #0]
	uint8_t dataReg[2]; /* Buffer for reading the register content */
	uint16_t dataRegLong; /* Variable used to store the whole register content */
	float tempVal = 0; /* Float variable used for storing the temperature value */
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
	float tempValDec; /* Float variable used for calculation of the decimal part */

	/* Address the temperature register */
	HAL_I2C_Master_Transmit(&hi2c1, MCP9808_ADDRESS, &tempReg, 1, 2000u);
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	482a      	ldr	r0, [pc, #168]	@ (8000fdc <MCP9808_GetTemperature+0xc0>)
 8000f32:	23fa      	movs	r3, #250	@ 0xfa
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2130      	movs	r1, #48	@ 0x30
 8000f3c:	f000 fd2a 	bl	8001994 <HAL_I2C_Master_Transmit>
	/* Read the temperature register content */
	HAL_I2C_Master_Receive(&hi2c1, MCP9808_ADDRESS | 0x01, dataReg, 2, 2000u);
 8000f40:	1d3a      	adds	r2, r7, #4
 8000f42:	4826      	ldr	r0, [pc, #152]	@ (8000fdc <MCP9808_GetTemperature+0xc0>)
 8000f44:	23fa      	movs	r3, #250	@ 0xfa
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	2131      	movs	r1, #49	@ 0x31
 8000f4e:	f000 fe4b 	bl	8001be8 <HAL_I2C_Master_Receive>

	/* Compose the register content, regardless of the endianess */
	dataRegLong = ((dataReg[0] << 8u) | dataReg[1]);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	210a      	movs	r1, #10
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	801a      	strh	r2, [r3, #0]

	/* Extract the integer part from the fixed point value */
	tempVal = ((dataRegLong & 0x0FFF) >> 4);
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	111b      	asrs	r3, r3, #4
 8000f70:	22ff      	movs	r2, #255	@ 0xff
 8000f72:	4013      	ands	r3, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff fc59 	bl	800082c <__aeabi_i2f>
 8000f7a:	1c03      	adds	r3, r0, #0
 8000f7c:	617b      	str	r3, [r7, #20]

	/* Extract decimal part */
	tempValDec = 0.0625;
 8000f7e:	23f6      	movs	r3, #246	@ 0xf6
 8000f80:	059b      	lsls	r3, r3, #22
 8000f82:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 4; i++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e020      	b.n	8000fcc <MCP9808_GetTemperature+0xb0>
		tempVal += ((dataRegLong >> i) & 0x0001) * tempValDec;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	411a      	asrs	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	2201      	movs	r2, #1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff fc46 	bl	800082c <__aeabi_i2f>
 8000fa0:	1c03      	adds	r3, r0, #0
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	1c18      	adds	r0, r3, #0
 8000fa6:	f7ff fb03 	bl	80005b0 <__aeabi_fmul>
 8000faa:	1c03      	adds	r3, r0, #0
 8000fac:	1c19      	adds	r1, r3, #0
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff f974 	bl	800029c <__aeabi_fadd>
 8000fb4:	1c03      	adds	r3, r0, #0
 8000fb6:	617b      	str	r3, [r7, #20]
		tempValDec *= 2u;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1c19      	adds	r1, r3, #0
 8000fbc:	1c18      	adds	r0, r3, #0
 8000fbe:	f7ff f96d 	bl	800029c <__aeabi_fadd>
 8000fc2:	1c03      	adds	r3, r0, #0
 8000fc4:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 4; i++) {
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	dddb      	ble.n	8000f8a <MCP9808_GetTemperature+0x6e>
	}

	return tempVal;
 8000fd2:	697b      	ldr	r3, [r7, #20]
}
 8000fd4:	1c18      	adds	r0, r3, #0
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b006      	add	sp, #24
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000028 	.word	0x20000028

08000fe0 <turnFanOn>:

/**
 * @brief Turn the fan on and update status
 */
void turnFanOn(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	fanStatus = true;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <turnFanOn+0x20>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, FAN1_Pin | FAN2_Pin | STAT_LED_Pin, GPIO_PIN_SET);
 8000fea:	2390      	movs	r3, #144	@ 0x90
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	2201      	movs	r2, #1
 8000ff0:	21e0      	movs	r1, #224	@ 0xe0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fc0a 	bl	800180c <HAL_GPIO_WritePin>
}
 8000ff8:	46c0      	nop			@ (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	200000c4 	.word	0x200000c4

08001004 <turnFanOff>:

/**
 * @brief Turn the fan off and update status
 */
void turnFanOff(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	fanStatus = false;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <turnFanOff+0x20>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, FAN1_Pin | FAN2_Pin | STAT_LED_Pin, GPIO_PIN_RESET);
 800100e:	2390      	movs	r3, #144	@ 0x90
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	2200      	movs	r2, #0
 8001014:	21e0      	movs	r1, #224	@ 0xe0
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fbf8 	bl	800180c <HAL_GPIO_WritePin>
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	200000c4 	.word	0x200000c4

08001028 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer 3 interrupt handler triggered every 100 milliseconds
 * @param htim: Timer handle pointer
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d114      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timerRunning) {
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d010      	beq.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timerCounter += 1;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800104a:	601a      	str	r2, [r3, #0]
			if (timerCounter >= FAN_ON_TIME_TICKS) {
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2396      	movs	r3, #150	@ 0x96
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	429a      	cmp	r2, r3
 8001056:	db05      	blt.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timerRunning = false;
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
				timerCounter = 0;
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40000400 	.word	0x40000400
 8001070:	200000c5 	.word	0x200000c5
 8001074:	200000cc 	.word	0x200000cc

08001078 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	e7fd      	b.n	8001080 <Error_Handler+0x8>

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <HAL_MspInit+0x44>)
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_MspInit+0x44>)
 8001090:	2101      	movs	r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <HAL_MspInit+0x44>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2201      	movs	r2, #1
 800109c:	4013      	ands	r3, r2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <HAL_MspInit+0x44>)
 80010a4:	69da      	ldr	r2, [r3, #28]
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_MspInit+0x44>)
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0549      	lsls	r1, r1, #21
 80010ac:	430a      	orrs	r2, r1
 80010ae:	61da      	str	r2, [r3, #28]
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_MspInit+0x44>)
 80010b2:	69da      	ldr	r2, [r3, #28]
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	055b      	lsls	r3, r3, #21
 80010b8:	4013      	ands	r3, r2
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b08b      	sub	sp, #44	@ 0x2c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2414      	movs	r4, #20
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	0018      	movs	r0, r3
 80010da:	2314      	movs	r3, #20
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f002 faf0 	bl	80036c4 <memset>
  if(hi2c->Instance==I2C1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <HAL_I2C_MspInit+0x94>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d133      	bne.n	8001156 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_I2C_MspInit+0x98>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <HAL_I2C_MspInit+0x98>)
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0289      	lsls	r1, r1, #10
 80010f8:	430a      	orrs	r2, r1
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_I2C_MspInit+0x98>)
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	22c0      	movs	r2, #192	@ 0xc0
 800110e:	00d2      	lsls	r2, r2, #3
 8001110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001112:	0021      	movs	r1, r4
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2212      	movs	r2, #18
 8001118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2203      	movs	r2, #3
 8001124:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2204      	movs	r2, #4
 800112a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	187a      	adds	r2, r7, r1
 800112e:	2390      	movs	r3, #144	@ 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f000 f9f9 	bl	800152c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_I2C_MspInit+0x98>)
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_I2C_MspInit+0x98>)
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	0389      	lsls	r1, r1, #14
 8001144:	430a      	orrs	r2, r1
 8001146:	61da      	str	r2, [r3, #28]
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_I2C_MspInit+0x98>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	039b      	lsls	r3, r3, #14
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b00b      	add	sp, #44	@ 0x2c
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	40005400 	.word	0x40005400
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <HAL_TIM_Base_MspInit+0x44>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d113      	bne.n	80011a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <HAL_TIM_Base_MspInit+0x48>)
 800117c:	69da      	ldr	r2, [r3, #28]
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_TIM_Base_MspInit+0x48>)
 8001180:	2102      	movs	r1, #2
 8001182:	430a      	orrs	r2, r1
 8001184:	61da      	str	r2, [r3, #28]
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_TIM_Base_MspInit+0x48>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2010      	movs	r0, #16
 8001198:	f000 f996 	bl	80014c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800119c:	2010      	movs	r0, #16
 800119e:	f000 f9a8 	bl	80014f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40021000 	.word	0x40021000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	e7fd      	b.n	80011b8 <NMI_Handler+0x4>

080011bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	e7fd      	b.n	80011c0 <HardFault_Handler+0x4>

080011c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f888 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <TIM3_IRQHandler+0x14>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f001 ff10 	bl	8003014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	2000007c 	.word	0x2000007c

08001200 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001210:	f7ff fff6 	bl	8001200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800123a:	f002 fa4b 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff fcd1 	bl	8000be4 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001250:	0800376c 	.word	0x0800376c
  ldr r2, =_sbss
 8001254:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001258:	200000d4 	.word	0x200000d4

0800125c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_IRQHandler>
	...

08001260 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <HAL_Init+0x24>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_Init+0x24>)
 800126a:	2110      	movs	r1, #16
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f809 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001276:	f7ff ff05 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	40022000 	.word	0x40022000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_InitTick+0x5c>)
 8001292:	681c      	ldr	r4, [r3, #0]
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	0019      	movs	r1, r3
 800129a:	23fa      	movs	r3, #250	@ 0xfa
 800129c:	0098      	lsls	r0, r3, #2
 800129e:	f7fe ff33 	bl	8000108 <__udivsi3>
 80012a2:	0003      	movs	r3, r0
 80012a4:	0019      	movs	r1, r3
 80012a6:	0020      	movs	r0, r4
 80012a8:	f7fe ff2e 	bl	8000108 <__udivsi3>
 80012ac:	0003      	movs	r3, r0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f92f 	bl	8001512 <HAL_SYSTICK_Config>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e00f      	b.n	80012dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d80b      	bhi.n	80012da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2301      	movs	r3, #1
 80012c6:	425b      	negs	r3, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f8fc 	bl	80014c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_InitTick+0x64>)
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	001a      	movs	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	18d2      	adds	r2, r2, r3
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_IncTick+0x20>)
 8001302:	601a      	str	r2, [r3, #0]
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	20000008 	.word	0x20000008
 8001310:	200000d0 	.word	0x200000d0

08001314 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	200000d0 	.word	0x200000d0

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fff0 	bl	8001314 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	001a      	movs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	189b      	adds	r3, r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	f7ff ffe0 	bl	8001314 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	20000008 	.word	0x20000008

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b7f      	cmp	r3, #127	@ 0x7f
 8001382:	d809      	bhi.n	8001398 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	001a      	movs	r2, r3
 800138a:	231f      	movs	r3, #31
 800138c:	401a      	ands	r2, r3
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_EnableIRQ+0x30>)
 8001390:	2101      	movs	r1, #1
 8001392:	4091      	lsls	r1, r2
 8001394:	000a      	movs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
  }
}
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80013b8:	d828      	bhi.n	800140c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001478 <__NVIC_SetPriority+0xd4>)
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	33c0      	adds	r3, #192	@ 0xc0
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	589b      	ldr	r3, [r3, r2]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	2203      	movs	r2, #3
 80013d2:	400a      	ands	r2, r1
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	21ff      	movs	r1, #255	@ 0xff
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	43d2      	mvns	r2, r2
 80013de:	401a      	ands	r2, r3
 80013e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	22ff      	movs	r2, #255	@ 0xff
 80013e8:	401a      	ands	r2, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	4003      	ands	r3, r0
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	481f      	ldr	r0, [pc, #124]	@ (8001478 <__NVIC_SetPriority+0xd4>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	430a      	orrs	r2, r1
 8001404:	33c0      	adds	r3, #192	@ 0xc0
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800140a:	e031      	b.n	8001470 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <__NVIC_SetPriority+0xd8>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	0019      	movs	r1, r3
 8001414:	230f      	movs	r3, #15
 8001416:	400b      	ands	r3, r1
 8001418:	3b08      	subs	r3, #8
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3306      	adds	r3, #6
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	3304      	adds	r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1dfa      	adds	r2, r7, #7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	0011      	movs	r1, r2
 800142c:	2203      	movs	r2, #3
 800142e:	400a      	ands	r2, r1
 8001430:	00d2      	lsls	r2, r2, #3
 8001432:	21ff      	movs	r1, #255	@ 0xff
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	43d2      	mvns	r2, r2
 800143a:	401a      	ands	r2, r3
 800143c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	22ff      	movs	r2, #255	@ 0xff
 8001444:	401a      	ands	r2, r3
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0018      	movs	r0, r3
 800144c:	2303      	movs	r3, #3
 800144e:	4003      	ands	r3, r0
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <__NVIC_SetPriority+0xd8>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	001c      	movs	r4, r3
 800145c:	230f      	movs	r3, #15
 800145e:	4023      	ands	r3, r4
 8001460:	3b08      	subs	r3, #8
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	430a      	orrs	r2, r1
 8001466:	3306      	adds	r3, #6
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	18c3      	adds	r3, r0, r3
 800146c:	3304      	adds	r3, #4
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b003      	add	sp, #12
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	045b      	lsls	r3, r3, #17
 8001490:	429a      	cmp	r2, r3
 8001492:	d301      	bcc.n	8001498 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001494:	2301      	movs	r3, #1
 8001496:	e010      	b.n	80014ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <SysTick_Config+0x44>)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	3a01      	subs	r2, #1
 800149e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a0:	2301      	movs	r3, #1
 80014a2:	425b      	negs	r3, r3
 80014a4:	2103      	movs	r1, #3
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff ff7c 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <SysTick_Config+0x44>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SysTick_Config+0x44>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	210f      	movs	r1, #15
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	0002      	movs	r2, r0
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff ff33 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ffaf 	bl	8001480 <SysTick_Config>
 8001522:	0003      	movs	r3, r0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	e14f      	b.n	80017dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4091      	lsls	r1, r2
 8001546:	000a      	movs	r2, r1
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d100      	bne.n	8001554 <HAL_GPIO_Init+0x28>
 8001552:	e140      	b.n	80017d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2203      	movs	r2, #3
 800155a:	4013      	ands	r3, r2
 800155c:	2b01      	cmp	r3, #1
 800155e:	d005      	beq.n	800156c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001568:	2b02      	cmp	r3, #2
 800156a:	d130      	bne.n	80015ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	409a      	lsls	r2, r3
 800157a:	0013      	movs	r3, r2
 800157c:	43da      	mvns	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a2:	2201      	movs	r2, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	2201      	movs	r2, #1
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2203      	movs	r2, #3
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d017      	beq.n	800160a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	43da      	mvns	r2, r3
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2203      	movs	r2, #3
 8001610:	4013      	ands	r3, r2
 8001612:	2b02      	cmp	r3, #2
 8001614:	d123      	bne.n	800165e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	58d3      	ldr	r3, [r2, r3]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2207      	movs	r2, #7
 8001628:	4013      	ands	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2107      	movs	r1, #7
 8001642:	400b      	ands	r3, r1
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	409a      	lsls	r2, r3
 8001648:	0013      	movs	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	6939      	ldr	r1, [r7, #16]
 800165c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	43da      	mvns	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2203      	movs	r2, #3
 800167c:	401a      	ands	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	409a      	lsls	r2, r3
 8001684:	0013      	movs	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	23c0      	movs	r3, #192	@ 0xc0
 8001698:	029b      	lsls	r3, r3, #10
 800169a:	4013      	ands	r3, r2
 800169c:	d100      	bne.n	80016a0 <HAL_GPIO_Init+0x174>
 800169e:	e09a      	b.n	80017d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a0:	4b54      	ldr	r3, [pc, #336]	@ (80017f4 <HAL_GPIO_Init+0x2c8>)
 80016a2:	699a      	ldr	r2, [r3, #24]
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <HAL_GPIO_Init+0x2c8>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	4b51      	ldr	r3, [pc, #324]	@ (80017f4 <HAL_GPIO_Init+0x2c8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016b8:	4a4f      	ldr	r2, [pc, #316]	@ (80017f8 <HAL_GPIO_Init+0x2cc>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	589b      	ldr	r3, [r3, r2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2203      	movs	r2, #3
 80016ca:	4013      	ands	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	43da      	mvns	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	2390      	movs	r3, #144	@ 0x90
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x1e2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a44      	ldr	r2, [pc, #272]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x1de>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a43      	ldr	r2, [pc, #268]	@ (8001800 <HAL_GPIO_Init+0x2d4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x1da>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a42      	ldr	r2, [pc, #264]	@ (8001804 <HAL_GPIO_Init+0x2d8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x1d6>
 80016fe:	2303      	movs	r3, #3
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x1e4>
 8001702:	2305      	movs	r3, #5
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x1e4>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x1e4>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x1e4>
 800170e:	2300      	movs	r3, #0
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	2103      	movs	r1, #3
 8001714:	400a      	ands	r2, r1
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	@ (80017f8 <HAL_GPIO_Init+0x2cc>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b36      	ldr	r3, [pc, #216]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	035b      	lsls	r3, r3, #13
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001758:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	039b      	lsls	r3, r3, #14
 8001770:	4013      	ands	r3, r2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	2380      	movs	r3, #128	@ 0x80
 8001798:	029b      	lsls	r3, r3, #10
 800179a:	4013      	ands	r3, r2
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	025b      	lsls	r3, r3, #9
 80017c4:	4013      	ands	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_GPIO_Init+0x2dc>)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	1e13      	subs	r3, r2, #0
 80017e6:	d000      	beq.n	80017ea <HAL_GPIO_Init+0x2be>
 80017e8:	e6a8      	b.n	800153c <HAL_GPIO_Init+0x10>
  } 
}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b006      	add	sp, #24
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	0008      	movs	r0, r1
 8001816:	0011      	movs	r1, r2
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	1c7b      	adds	r3, r7, #1
 8001820:	1c0a      	adds	r2, r1, #0
 8001822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	1c7b      	adds	r3, r7, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e08f      	b.n	800197a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2241      	movs	r2, #65	@ 0x41
 800185e:	5c9b      	ldrb	r3, [r3, r2]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2240      	movs	r2, #64	@ 0x40
 800186a:	2100      	movs	r1, #0
 800186c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fc2b 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2241      	movs	r2, #65	@ 0x41
 800187a:	2124      	movs	r1, #36	@ 0x24
 800187c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	438a      	bics	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	493b      	ldr	r1, [pc, #236]	@ (8001984 <HAL_I2C_Init+0x13c>)
 8001898:	400a      	ands	r2, r1
 800189a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4938      	ldr	r1, [pc, #224]	@ (8001988 <HAL_I2C_Init+0x140>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	0209      	lsls	r1, r1, #8
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e007      	b.n	80018d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2184      	movs	r1, #132	@ 0x84
 80018d0:	0209      	lsls	r1, r1, #8
 80018d2:	430a      	orrs	r2, r1
 80018d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d109      	bne.n	80018f2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	0109      	lsls	r1, r1, #4
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	e007      	b.n	8001902 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4923      	ldr	r1, [pc, #140]	@ (800198c <HAL_I2C_Init+0x144>)
 80018fe:	400a      	ands	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4920      	ldr	r1, [pc, #128]	@ (8001990 <HAL_I2C_Init+0x148>)
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	491a      	ldr	r1, [pc, #104]	@ (8001988 <HAL_I2C_Init+0x140>)
 800191e:	400a      	ands	r2, r1
 8001920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	431a      	orrs	r2, r3
 800192c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69d9      	ldr	r1, [r3, #28]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1a      	ldr	r2, [r3, #32]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2241      	movs	r2, #65	@ 0x41
 8001966:	2120      	movs	r1, #32
 8001968:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2242      	movs	r2, #66	@ 0x42
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	f0ffffff 	.word	0xf0ffffff
 8001988:	ffff7fff 	.word	0xffff7fff
 800198c:	fffff7ff 	.word	0xfffff7ff
 8001990:	02008000 	.word	0x02008000

08001994 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	0008      	movs	r0, r1
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	0019      	movs	r1, r3
 80019a2:	230a      	movs	r3, #10
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	1c02      	adds	r2, r0, #0
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	2308      	movs	r3, #8
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	1c0a      	adds	r2, r1, #0
 80019b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2241      	movs	r2, #65	@ 0x41
 80019b6:	5c9b      	ldrb	r3, [r3, r2]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d000      	beq.n	80019c0 <HAL_I2C_Master_Transmit+0x2c>
 80019be:	e10a      	b.n	8001bd6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	5c9b      	ldrb	r3, [r3, r2]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_I2C_Master_Transmit+0x3a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e104      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x244>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2240      	movs	r2, #64	@ 0x40
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019d6:	f7ff fc9d 	bl	8001314 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	0219      	lsls	r1, r3, #8
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2319      	movs	r3, #25
 80019ea:	2201      	movs	r2, #1
 80019ec:	f000 fa26 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0ef      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2241      	movs	r2, #65	@ 0x41
 80019fc:	2121      	movs	r1, #33	@ 0x21
 80019fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2242      	movs	r2, #66	@ 0x42
 8001a04:	2110      	movs	r1, #16
 8001a06:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2208      	movs	r2, #8
 8001a18:	18ba      	adds	r2, r7, r2
 8001a1a:	8812      	ldrh	r2, [r2, #0]
 8001a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2bff      	cmp	r3, #255	@ 0xff
 8001a2c:	d906      	bls.n	8001a3c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	22ff      	movs	r2, #255	@ 0xff
 8001a32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	045b      	lsls	r3, r3, #17
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e007      	b.n	8001a4c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a46:	2380      	movs	r3, #128	@ 0x80
 8001a48:	049b      	lsls	r3, r3, #18
 8001a4a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d027      	beq.n	8001aa4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	697c      	ldr	r4, [r7, #20]
 8001a90:	230a      	movs	r3, #10
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_I2C_Master_Transmit+0x24c>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	0023      	movs	r3, r4
 8001a9e:	f000 fc45 	bl	800232c <I2C_TransferConfig>
 8001aa2:	e06f      	b.n	8001b84 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	697c      	ldr	r4, [r7, #20]
 8001aac:	230a      	movs	r3, #10
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	8819      	ldrh	r1, [r3, #0]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_I2C_Master_Transmit+0x24c>)
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	0023      	movs	r3, r4
 8001aba:	f000 fc37 	bl	800232c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001abe:	e061      	b.n	8001b84 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fa10 	bl	8001eec <I2C_WaitOnTXISFlagUntilTimeout>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e081      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03a      	beq.n	8001b84 <HAL_I2C_Master_Transmit+0x1f0>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d136      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	0013      	movs	r3, r2
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	f000 f98a 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e053      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	2bff      	cmp	r3, #255	@ 0xff
 8001b38:	d911      	bls.n	8001b5e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	22ff      	movs	r2, #255	@ 0xff
 8001b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	045c      	lsls	r4, r3, #17
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	8819      	ldrh	r1, [r3, #0]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	2300      	movs	r3, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	0023      	movs	r3, r4
 8001b58:	f000 fbe8 	bl	800232c <I2C_TransferConfig>
 8001b5c:	e012      	b.n	8001b84 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	049c      	lsls	r4, r3, #18
 8001b72:	230a      	movs	r3, #10
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	8819      	ldrh	r1, [r3, #0]
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	0023      	movs	r3, r4
 8001b80:	f000 fbd4 	bl	800232c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d198      	bne.n	8001ac0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f9ef 	bl	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e01a      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	490b      	ldr	r1, [pc, #44]	@ (8001be4 <HAL_I2C_Master_Transmit+0x250>)
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2241      	movs	r2, #65	@ 0x41
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2242      	movs	r2, #66	@ 0x42
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2240      	movs	r2, #64	@ 0x40
 8001bce:	2100      	movs	r1, #0
 8001bd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
  }
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b007      	add	sp, #28
 8001bde:	bd90      	pop	{r4, r7, pc}
 8001be0:	80002000 	.word	0x80002000
 8001be4:	fe00e800 	.word	0xfe00e800

08001be8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	0008      	movs	r0, r1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	1c02      	adds	r2, r0, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
 8001bfe:	2308      	movs	r3, #8
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	1c0a      	adds	r2, r1, #0
 8001c04:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2241      	movs	r2, #65	@ 0x41
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d000      	beq.n	8001c14 <HAL_I2C_Master_Receive+0x2c>
 8001c12:	e0e8      	b.n	8001de6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	@ 0x40
 8001c18:	5c9b      	ldrb	r3, [r3, r2]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Master_Receive+0x3a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e0e2      	b.n	8001de8 <HAL_I2C_Master_Receive+0x200>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2240      	movs	r2, #64	@ 0x40
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c2a:	f7ff fb73 	bl	8001314 <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	0219      	lsls	r1, r3, #8
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2319      	movs	r3, #25
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f000 f8fc 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001c44:	1e03      	subs	r3, r0, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cd      	b.n	8001de8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2241      	movs	r2, #65	@ 0x41
 8001c50:	2122      	movs	r1, #34	@ 0x22
 8001c52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2242      	movs	r2, #66	@ 0x42
 8001c58:	2110      	movs	r1, #16
 8001c5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	18ba      	adds	r2, r7, r2
 8001c6e:	8812      	ldrh	r2, [r2, #0]
 8001c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2bff      	cmp	r3, #255	@ 0xff
 8001c80:	d911      	bls.n	8001ca6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	045c      	lsls	r4, r3, #17
 8001c92:	230a      	movs	r3, #10
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	8819      	ldrh	r1, [r3, #0]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	4b55      	ldr	r3, [pc, #340]	@ (8001df0 <HAL_I2C_Master_Receive+0x208>)
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	0023      	movs	r3, r4
 8001ca0:	f000 fb44 	bl	800232c <I2C_TransferConfig>
 8001ca4:	e076      	b.n	8001d94 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	049c      	lsls	r4, r3, #18
 8001cba:	230a      	movs	r3, #10
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	8819      	ldrh	r1, [r3, #0]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_I2C_Master_Receive+0x208>)
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	0023      	movs	r3, r4
 8001cc8:	f000 fb30 	bl	800232c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001ccc:	e062      	b.n	8001d94 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 f993 	bl	8002000 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e082      	b.n	8001de8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d03a      	beq.n	8001d94 <HAL_I2C_Master_Receive+0x1ac>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d136      	bne.n	8001d94 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	0013      	movs	r3, r2
 8001d30:	2200      	movs	r2, #0
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	f000 f882 	bl	8001e3c <I2C_WaitOnFlagUntilTimeout>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e053      	b.n	8001de8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2bff      	cmp	r3, #255	@ 0xff
 8001d48:	d911      	bls.n	8001d6e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	22ff      	movs	r2, #255	@ 0xff
 8001d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	045c      	lsls	r4, r3, #17
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	8819      	ldrh	r1, [r3, #0]
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	0023      	movs	r3, r4
 8001d68:	f000 fae0 	bl	800232c <I2C_TransferConfig>
 8001d6c:	e012      	b.n	8001d94 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	049c      	lsls	r4, r3, #18
 8001d82:	230a      	movs	r3, #10
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	8819      	ldrh	r1, [r3, #0]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	0023      	movs	r3, r4
 8001d90:	f000 facc 	bl	800232c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d197      	bne.n	8001cce <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 f8e7 	bl	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e01a      	b.n	8001de8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	490b      	ldr	r1, [pc, #44]	@ (8001df4 <HAL_I2C_Master_Receive+0x20c>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2241      	movs	r2, #65	@ 0x41
 8001dce:	2120      	movs	r1, #32
 8001dd0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2242      	movs	r2, #66	@ 0x42
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2240      	movs	r2, #64	@ 0x40
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
  }
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b007      	add	sp, #28
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	80002400 	.word	0x80002400
 8001df4:	fe00e800 	.word	0xfe00e800

08001df8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2202      	movs	r2, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d103      	bne.n	8001e16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d007      	beq.n	8001e34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	619a      	str	r2, [r3, #24]
  }
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4c:	e03a      	b.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 f971 	bl	800213c <I2C_IsErrorOccurred>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e040      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	d02d      	beq.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e68:	f7ff fa54 	bl	8001314 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d302      	bcc.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x42>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d122      	bne.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4013      	ands	r3, r2
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	425a      	negs	r2, r3
 8001e8e:	4153      	adcs	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	001a      	movs	r2, r3
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d113      	bne.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2241      	movs	r2, #65	@ 0x41
 8001eac:	2120      	movs	r1, #32
 8001eae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2242      	movs	r2, #66	@ 0x42
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2240      	movs	r2, #64	@ 0x40
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e00f      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	425a      	negs	r2, r3
 8001ed4:	4153      	adcs	r3, r2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	001a      	movs	r2, r3
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d0b5      	beq.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef8:	e032      	b.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f91b 	bl	800213c <I2C_IsErrorOccurred>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e030      	b.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	d025      	beq.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f14:	f7ff f9fe 	bl	8001314 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d302      	bcc.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d11a      	bne.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d013      	beq.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2241      	movs	r2, #65	@ 0x41
 8001f48:	2120      	movs	r1, #32
 8001f4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2242      	movs	r2, #66	@ 0x42
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d1c5      	bne.n	8001efa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f84:	e02f      	b.n	8001fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 f8d5 	bl	800213c <I2C_IsErrorOccurred>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e02d      	b.n	8001ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9a:	f7ff f9bb 	bl	8001314 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11a      	bne.n	8001fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d013      	beq.n	8001fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2241      	movs	r2, #65	@ 0x41
 8001fce:	2120      	movs	r1, #32
 8001fd0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2242      	movs	r2, #66	@ 0x42
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	@ 0x40
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e007      	b.n	8001ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2220      	movs	r2, #32
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d1c8      	bne.n	8001f86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2317      	movs	r3, #23
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002014:	e07b      	b.n	800210e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 f88d 	bl	800213c <I2C_IsErrorOccurred>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d003      	beq.n	800202e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002026:	2317      	movs	r3, #23
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2220      	movs	r2, #32
 8002036:	4013      	ands	r3, r2
 8002038:	2b20      	cmp	r3, #32
 800203a:	d140      	bne.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800203c:	2117      	movs	r1, #23
 800203e:	187b      	adds	r3, r7, r1
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d13b      	bne.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	2b04      	cmp	r3, #4
 8002052:	d106      	bne.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2210      	movs	r2, #16
 800206a:	4013      	ands	r3, r2
 800206c:	2b10      	cmp	r3, #16
 800206e:	d123      	bne.n	80020b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2210      	movs	r2, #16
 8002076:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2204      	movs	r2, #4
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2220      	movs	r2, #32
 8002084:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4929      	ldr	r1, [pc, #164]	@ (8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002092:	400a      	ands	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2241      	movs	r2, #65	@ 0x41
 800209a:	2120      	movs	r1, #32
 800209c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2242      	movs	r2, #66	@ 0x42
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2240      	movs	r2, #64	@ 0x40
 80020aa:	2100      	movs	r1, #0
 80020ac:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80020ae:	2317      	movs	r3, #23
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e002      	b.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80020be:	f7ff f929 	bl	8001314 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11c      	bne.n	800210e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80020d4:	2017      	movs	r0, #23
 80020d6:	183b      	adds	r3, r7, r0
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d117      	bne.n	800210e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2204      	movs	r2, #4
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d010      	beq.n	800210e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	2220      	movs	r2, #32
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2241      	movs	r2, #65	@ 0x41
 80020fc:	2120      	movs	r1, #32
 80020fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002108:	183b      	adds	r3, r7, r0
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2204      	movs	r2, #4
 8002116:	4013      	ands	r3, r2
 8002118:	2b04      	cmp	r3, #4
 800211a:	d005      	beq.n	8002128 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800211c:	2317      	movs	r3, #23
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d100      	bne.n	8002128 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002126:	e776      	b.n	8002016 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002128:	2317      	movs	r3, #23
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b006      	add	sp, #24
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	fe00e800 	.word	0xfe00e800

0800213c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	@ 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2327      	movs	r3, #39	@ 0x27
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2210      	movs	r2, #16
 8002164:	4013      	ands	r3, r2
 8002166:	d100      	bne.n	800216a <I2C_IsErrorOccurred+0x2e>
 8002168:	e079      	b.n	800225e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2210      	movs	r2, #16
 8002170:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002172:	e057      	b.n	8002224 <I2C_IsErrorOccurred+0xe8>
 8002174:	2227      	movs	r2, #39	@ 0x27
 8002176:	18bb      	adds	r3, r7, r2
 8002178:	18ba      	adds	r2, r7, r2
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3301      	adds	r3, #1
 8002182:	d04f      	beq.n	8002224 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002184:	f7ff f8c6 	bl	8001314 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	d302      	bcc.n	800219a <I2C_IsErrorOccurred+0x5e>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d144      	bne.n	8002224 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021a8:	2013      	movs	r0, #19
 80021aa:	183b      	adds	r3, r7, r0
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	2142      	movs	r1, #66	@ 0x42
 80021b0:	5c52      	ldrb	r2, [r2, r1]
 80021b2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	401a      	ands	r2, r3
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d126      	bne.n	8002216 <I2C_IsErrorOccurred+0xda>
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	01db      	lsls	r3, r3, #7
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d021      	beq.n	8002216 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d01d      	beq.n	8002216 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2180      	movs	r1, #128	@ 0x80
 80021e6:	01c9      	lsls	r1, r1, #7
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021ec:	f7ff f892 	bl	8001314 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021f4:	e00f      	b.n	8002216 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021f6:	f7ff f88d 	bl	8001314 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b19      	cmp	r3, #25
 8002202:	d908      	bls.n	8002216 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2220      	movs	r2, #32
 8002208:	4313      	orrs	r3, r2
 800220a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800220c:	2327      	movs	r3, #39	@ 0x27
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]

              break;
 8002214:	e006      	b.n	8002224 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2220      	movs	r2, #32
 800221e:	4013      	ands	r3, r2
 8002220:	2b20      	cmp	r3, #32
 8002222:	d1e8      	bne.n	80021f6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2220      	movs	r2, #32
 800222c:	4013      	ands	r3, r2
 800222e:	2b20      	cmp	r3, #32
 8002230:	d004      	beq.n	800223c <I2C_IsErrorOccurred+0x100>
 8002232:	2327      	movs	r3, #39	@ 0x27
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d09b      	beq.n	8002174 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800223c:	2327      	movs	r3, #39	@ 0x27
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d103      	bne.n	800224e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2220      	movs	r2, #32
 800224c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2204      	movs	r2, #4
 8002252:	4313      	orrs	r3, r2
 8002254:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002256:	2327      	movs	r3, #39	@ 0x27
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4013      	ands	r3, r2
 800226e:	d00c      	beq.n	800228a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2201      	movs	r2, #1
 8002274:	4313      	orrs	r3, r2
 8002276:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2280      	movs	r2, #128	@ 0x80
 800227e:	0052      	lsls	r2, r2, #1
 8002280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002282:	2327      	movs	r3, #39	@ 0x27
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4013      	ands	r3, r2
 8002292:	d00c      	beq.n	80022ae <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2208      	movs	r2, #8
 8002298:	4313      	orrs	r3, r2
 800229a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	00d2      	lsls	r2, r2, #3
 80022a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022a6:	2327      	movs	r3, #39	@ 0x27
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	d00c      	beq.n	80022d2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4313      	orrs	r3, r2
 80022be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2280      	movs	r2, #128	@ 0x80
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ca:	2327      	movs	r3, #39	@ 0x27
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80022d2:	2327      	movs	r3, #39	@ 0x27
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	0018      	movs	r0, r3
 80022e0:	f7ff fd8a 	bl	8001df8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	490e      	ldr	r1, [pc, #56]	@ (8002328 <I2C_IsErrorOccurred+0x1ec>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2241      	movs	r2, #65	@ 0x41
 8002304:	2120      	movs	r1, #32
 8002306:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2242      	movs	r2, #66	@ 0x42
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	@ 0x40
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002318:	2327      	movs	r3, #39	@ 0x27
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b00a      	add	sp, #40	@ 0x28
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	fe00e800 	.word	0xfe00e800

0800232c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	0008      	movs	r0, r1
 8002336:	0011      	movs	r1, r2
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	240a      	movs	r4, #10
 800233c:	193b      	adds	r3, r7, r4
 800233e:	1c02      	adds	r2, r0, #0
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	2009      	movs	r0, #9
 8002344:	183b      	adds	r3, r7, r0
 8002346:	1c0a      	adds	r2, r1, #0
 8002348:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234a:	193b      	adds	r3, r7, r4
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	059b      	lsls	r3, r3, #22
 8002350:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002352:	183b      	adds	r3, r7, r0
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	0419      	lsls	r1, r3, #16
 8002358:	23ff      	movs	r3, #255	@ 0xff
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800235e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002366:	4313      	orrs	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002376:	0d51      	lsrs	r1, r2, #21
 8002378:	2280      	movs	r2, #128	@ 0x80
 800237a:	00d2      	lsls	r2, r2, #3
 800237c:	400a      	ands	r2, r1
 800237e:	4907      	ldr	r1, [pc, #28]	@ (800239c <I2C_TransferConfig+0x70>)
 8002380:	430a      	orrs	r2, r1
 8002382:	43d2      	mvns	r2, r2
 8002384:	401a      	ands	r2, r3
 8002386:	0011      	movs	r1, r2
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b007      	add	sp, #28
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	03ff63ff 	.word	0x03ff63ff

080023a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2241      	movs	r2, #65	@ 0x41
 80023ae:	5c9b      	ldrb	r3, [r3, r2]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d138      	bne.n	8002428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2240      	movs	r2, #64	@ 0x40
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e032      	b.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2241      	movs	r2, #65	@ 0x41
 80023d0:	2124      	movs	r1, #36	@ 0x24
 80023d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4911      	ldr	r1, [pc, #68]	@ (8002434 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2241      	movs	r2, #65	@ 0x41
 8002418:	2120      	movs	r1, #32
 800241a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2240      	movs	r2, #64	@ 0x40
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	ffffefff 	.word	0xffffefff

08002438 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	@ 0x41
 8002446:	5c9b      	ldrb	r3, [r3, r2]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b20      	cmp	r3, #32
 800244c:	d139      	bne.n	80024c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002458:	2302      	movs	r3, #2
 800245a:	e033      	b.n	80024c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	2101      	movs	r1, #1
 8002462:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2241      	movs	r2, #65	@ 0x41
 8002468:	2124      	movs	r1, #36	@ 0x24
 800246a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a11      	ldr	r2, [pc, #68]	@ (80024cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2241      	movs	r2, #65	@ 0x41
 80024b2:	2120      	movs	r1, #32
 80024b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2240      	movs	r2, #64	@ 0x40
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	fffff0ff 	.word	0xfffff0ff

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e301      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d100      	bne.n	80024ee <HAL_RCC_OscConfig+0x1e>
 80024ec:	e08d      	b.n	800260a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024ee:	4bc3      	ldr	r3, [pc, #780]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	220c      	movs	r2, #12
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00e      	beq.n	8002518 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024fa:	4bc0      	ldr	r3, [pc, #768]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	220c      	movs	r2, #12
 8002500:	4013      	ands	r3, r2
 8002502:	2b08      	cmp	r3, #8
 8002504:	d116      	bne.n	8002534 <HAL_RCC_OscConfig+0x64>
 8002506:	4bbd      	ldr	r3, [pc, #756]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	401a      	ands	r2, r3
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	429a      	cmp	r2, r3
 8002516:	d10d      	bne.n	8002534 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4bb8      	ldr	r3, [pc, #736]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	@ 0x80
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x56>
 8002524:	e070      	b.n	8002608 <HAL_RCC_OscConfig+0x138>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d000      	beq.n	8002530 <HAL_RCC_OscConfig+0x60>
 800252e:	e06b      	b.n	8002608 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e2d8      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x7c>
 800253c:	4baf      	ldr	r3, [pc, #700]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4bae      	ldr	r3, [pc, #696]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002542:	2180      	movs	r1, #128	@ 0x80
 8002544:	0249      	lsls	r1, r1, #9
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e02f      	b.n	80025ac <HAL_RCC_OscConfig+0xdc>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10c      	bne.n	800256e <HAL_RCC_OscConfig+0x9e>
 8002554:	4ba9      	ldr	r3, [pc, #676]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4ba8      	ldr	r3, [pc, #672]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800255a:	49a9      	ldr	r1, [pc, #676]	@ (8002800 <HAL_RCC_OscConfig+0x330>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	4ba6      	ldr	r3, [pc, #664]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4ba5      	ldr	r3, [pc, #660]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002566:	49a7      	ldr	r1, [pc, #668]	@ (8002804 <HAL_RCC_OscConfig+0x334>)
 8002568:	400a      	ands	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e01e      	b.n	80025ac <HAL_RCC_OscConfig+0xdc>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d10e      	bne.n	8002594 <HAL_RCC_OscConfig+0xc4>
 8002576:	4ba1      	ldr	r3, [pc, #644]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4ba0      	ldr	r3, [pc, #640]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	02c9      	lsls	r1, r1, #11
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b9d      	ldr	r3, [pc, #628]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b9c      	ldr	r3, [pc, #624]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800258a:	2180      	movs	r1, #128	@ 0x80
 800258c:	0249      	lsls	r1, r1, #9
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0xdc>
 8002594:	4b99      	ldr	r3, [pc, #612]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b98      	ldr	r3, [pc, #608]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800259a:	4999      	ldr	r1, [pc, #612]	@ (8002800 <HAL_RCC_OscConfig+0x330>)
 800259c:	400a      	ands	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4b96      	ldr	r3, [pc, #600]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b95      	ldr	r3, [pc, #596]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80025a6:	4997      	ldr	r1, [pc, #604]	@ (8002804 <HAL_RCC_OscConfig+0x334>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d014      	beq.n	80025de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe feae 	bl	8001314 <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025be:	f7fe fea9 	bl	8001314 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b64      	cmp	r3, #100	@ 0x64
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e28a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d0:	4b8a      	ldr	r3, [pc, #552]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	029b      	lsls	r3, r3, #10
 80025d8:	4013      	ands	r3, r2
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0xee>
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7fe fe99 	bl	8001314 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fe94 	bl	8001314 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e275      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b80      	ldr	r3, [pc, #512]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	029b      	lsls	r3, r3, #10
 8002602:	4013      	ands	r3, r2
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x118>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d100      	bne.n	8002616 <HAL_RCC_OscConfig+0x146>
 8002614:	e069      	b.n	80026ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002616:	4b79      	ldr	r3, [pc, #484]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	220c      	movs	r2, #12
 800261c:	4013      	ands	r3, r2
 800261e:	d00b      	beq.n	8002638 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002620:	4b76      	ldr	r3, [pc, #472]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b08      	cmp	r3, #8
 800262a:	d11c      	bne.n	8002666 <HAL_RCC_OscConfig+0x196>
 800262c:	4b73      	ldr	r3, [pc, #460]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	025b      	lsls	r3, r3, #9
 8002634:	4013      	ands	r3, r2
 8002636:	d116      	bne.n	8002666 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002638:	4b70      	ldr	r3, [pc, #448]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2202      	movs	r2, #2
 800263e:	4013      	ands	r3, r2
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e24b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264e:	4b6b      	ldr	r3, [pc, #428]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	22f8      	movs	r2, #248	@ 0xf8
 8002654:	4393      	bics	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	00da      	lsls	r2, r3, #3
 800265e:	4b67      	ldr	r3, [pc, #412]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002664:	e041      	b.n	80026ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d024      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266e:	4b63      	ldr	r3, [pc, #396]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b62      	ldr	r3, [pc, #392]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe fe4b 	bl	8001314 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002684:	f7fe fe46 	bl	8001314 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e227      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d0f1      	beq.n	8002684 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b56      	ldr	r3, [pc, #344]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	22f8      	movs	r2, #248	@ 0xf8
 80026a6:	4393      	bics	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00da      	lsls	r2, r3, #3
 80026b0:	4b52      	ldr	r3, [pc, #328]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e018      	b.n	80026ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b4f      	ldr	r3, [pc, #316]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80026be:	2101      	movs	r1, #1
 80026c0:	438a      	bics	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fe26 	bl	8001314 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fe21 	bl	8001314 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e202      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e0:	4b46      	ldr	r3, [pc, #280]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d1f1      	bne.n	80026ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2208      	movs	r2, #8
 80026f0:	4013      	ands	r3, r2
 80026f2:	d036      	beq.n	8002762 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d019      	beq.n	8002730 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fc:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80026fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002700:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002702:	2101      	movs	r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7fe fe04 	bl	8001314 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002712:	f7fe fdff 	bl	8001314 <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1e0      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002724:	4b35      	ldr	r3, [pc, #212]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2202      	movs	r2, #2
 800272a:	4013      	ands	r3, r2
 800272c:	d0f1      	beq.n	8002712 <HAL_RCC_OscConfig+0x242>
 800272e:	e018      	b.n	8002762 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	4b32      	ldr	r3, [pc, #200]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002734:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002736:	2101      	movs	r1, #1
 8002738:	438a      	bics	r2, r1
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe fdea 	bl	8001314 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7fe fde5 	bl	8001314 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1c6      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d1f1      	bne.n	8002746 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	d100      	bne.n	800276e <HAL_RCC_OscConfig+0x29e>
 800276c:	e0b4      	b.n	80028d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	201f      	movs	r0, #31
 8002770:	183b      	adds	r3, r7, r0
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	4013      	ands	r3, r2
 8002780:	d110      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	0549      	lsls	r1, r1, #21
 800278c:	430a      	orrs	r2, r1
 800278e:	61da      	str	r2, [r3, #28]
 8002790:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	055b      	lsls	r3, r3, #21
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800279e:	183b      	adds	r3, r7, r0
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <HAL_RCC_OscConfig+0x338>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d11a      	bne.n	80027e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b0:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_RCC_OscConfig+0x338>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <HAL_RCC_OscConfig+0x338>)
 80027b6:	2180      	movs	r1, #128	@ 0x80
 80027b8:	0049      	lsls	r1, r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7fe fda9 	bl	8001314 <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fda4 	bl	8001314 <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e185      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_OscConfig+0x338>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10e      	bne.n	800280c <HAL_RCC_OscConfig+0x33c>
 80027ee:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	4b02      	ldr	r3, [pc, #8]	@ (80027fc <HAL_RCC_OscConfig+0x32c>)
 80027f4:	2101      	movs	r1, #1
 80027f6:	430a      	orrs	r2, r1
 80027f8:	621a      	str	r2, [r3, #32]
 80027fa:	e035      	b.n	8002868 <HAL_RCC_OscConfig+0x398>
 80027fc:	40021000 	.word	0x40021000
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	fffbffff 	.word	0xfffbffff
 8002808:	40007000 	.word	0x40007000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x35e>
 8002814:	4bb6      	ldr	r3, [pc, #728]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	4bb5      	ldr	r3, [pc, #724]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800281a:	2101      	movs	r1, #1
 800281c:	438a      	bics	r2, r1
 800281e:	621a      	str	r2, [r3, #32]
 8002820:	4bb3      	ldr	r3, [pc, #716]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	4bb2      	ldr	r3, [pc, #712]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002826:	2104      	movs	r1, #4
 8002828:	438a      	bics	r2, r1
 800282a:	621a      	str	r2, [r3, #32]
 800282c:	e01c      	b.n	8002868 <HAL_RCC_OscConfig+0x398>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b05      	cmp	r3, #5
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x380>
 8002836:	4bae      	ldr	r3, [pc, #696]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002838:	6a1a      	ldr	r2, [r3, #32]
 800283a:	4bad      	ldr	r3, [pc, #692]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800283c:	2104      	movs	r1, #4
 800283e:	430a      	orrs	r2, r1
 8002840:	621a      	str	r2, [r3, #32]
 8002842:	4bab      	ldr	r3, [pc, #684]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002844:	6a1a      	ldr	r2, [r3, #32]
 8002846:	4baa      	ldr	r3, [pc, #680]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002848:	2101      	movs	r1, #1
 800284a:	430a      	orrs	r2, r1
 800284c:	621a      	str	r2, [r3, #32]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0x398>
 8002850:	4ba7      	ldr	r3, [pc, #668]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	4ba6      	ldr	r3, [pc, #664]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002856:	2101      	movs	r1, #1
 8002858:	438a      	bics	r2, r1
 800285a:	621a      	str	r2, [r3, #32]
 800285c:	4ba4      	ldr	r3, [pc, #656]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800285e:	6a1a      	ldr	r2, [r3, #32]
 8002860:	4ba3      	ldr	r3, [pc, #652]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002862:	2104      	movs	r1, #4
 8002864:	438a      	bics	r2, r1
 8002866:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d014      	beq.n	800289a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe fd50 	bl	8001314 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	e009      	b.n	800288e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fd4b 	bl	8001314 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a9b      	ldr	r2, [pc, #620]	@ (8002af4 <HAL_RCC_OscConfig+0x624>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e12b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	4b98      	ldr	r3, [pc, #608]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2202      	movs	r2, #2
 8002894:	4013      	ands	r3, r2
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x3aa>
 8002898:	e013      	b.n	80028c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7fe fd3b 	bl	8001314 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	e009      	b.n	80028b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe fd36 	bl	8001314 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	4a91      	ldr	r2, [pc, #580]	@ (8002af4 <HAL_RCC_OscConfig+0x624>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e116      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	4b8d      	ldr	r3, [pc, #564]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	2202      	movs	r2, #2
 80028be:	4013      	ands	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c2:	231f      	movs	r3, #31
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028cc:	4b88      	ldr	r3, [pc, #544]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	4b87      	ldr	r3, [pc, #540]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028d2:	4989      	ldr	r1, [pc, #548]	@ (8002af8 <HAL_RCC_OscConfig+0x628>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2210      	movs	r2, #16
 80028de:	4013      	ands	r3, r2
 80028e0:	d063      	beq.n	80029aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d12a      	bne.n	8002940 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028ea:	4b81      	ldr	r3, [pc, #516]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ee:	4b80      	ldr	r3, [pc, #512]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028f0:	2104      	movs	r1, #4
 80028f2:	430a      	orrs	r2, r1
 80028f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028f6:	4b7e      	ldr	r3, [pc, #504]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fd07 	bl	8001314 <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800290c:	f7fe fd02 	bl	8001314 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0e3      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800291e:	4b74      	ldr	r3, [pc, #464]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d0f1      	beq.n	800290c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002928:	4b71      	ldr	r3, [pc, #452]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	22f8      	movs	r2, #248	@ 0xf8
 800292e:	4393      	bics	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	00da      	lsls	r2, r3, #3
 8002938:	4b6d      	ldr	r3, [pc, #436]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800293a:	430a      	orrs	r2, r1
 800293c:	635a      	str	r2, [r3, #52]	@ 0x34
 800293e:	e034      	b.n	80029aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	3305      	adds	r3, #5
 8002946:	d111      	bne.n	800296c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002948:	4b69      	ldr	r3, [pc, #420]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800294a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800294c:	4b68      	ldr	r3, [pc, #416]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800294e:	2104      	movs	r1, #4
 8002950:	438a      	bics	r2, r1
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002954:	4b66      	ldr	r3, [pc, #408]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002958:	22f8      	movs	r2, #248	@ 0xf8
 800295a:	4393      	bics	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	00da      	lsls	r2, r3, #3
 8002964:	4b62      	ldr	r3, [pc, #392]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002966:	430a      	orrs	r2, r1
 8002968:	635a      	str	r2, [r3, #52]	@ 0x34
 800296a:	e01e      	b.n	80029aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800296c:	4b60      	ldr	r3, [pc, #384]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800296e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002970:	4b5f      	ldr	r3, [pc, #380]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002972:	2104      	movs	r1, #4
 8002974:	430a      	orrs	r2, r1
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002978:	4b5d      	ldr	r3, [pc, #372]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800297a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800297c:	4b5c      	ldr	r3, [pc, #368]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe fcc6 	bl	8001314 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800298e:	f7fe fcc1 	bl	8001314 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0a2      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029a0:	4b53      	ldr	r3, [pc, #332]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80029a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f1      	bne.n	800298e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d100      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4e4>
 80029b2:	e097      	b.n	8002ae4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b4:	4b4e      	ldr	r3, [pc, #312]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	220c      	movs	r2, #12
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d100      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4f2>
 80029c0:	e06b      	b.n	8002a9a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d14c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b49      	ldr	r3, [pc, #292]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b48      	ldr	r3, [pc, #288]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80029d0:	494a      	ldr	r1, [pc, #296]	@ (8002afc <HAL_RCC_OscConfig+0x62c>)
 80029d2:	400a      	ands	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe fc9d 	bl	8001314 <HAL_GetTick>
 80029da:	0003      	movs	r3, r0
 80029dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fc98 	bl	8001314 <HAL_GetTick>
 80029e4:	0002      	movs	r2, r0
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e079      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	4b3f      	ldr	r3, [pc, #252]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	049b      	lsls	r3, r3, #18
 80029fa:	4013      	ands	r3, r2
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fe:	4b3c      	ldr	r3, [pc, #240]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	220f      	movs	r2, #15
 8002a04:	4393      	bics	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0c:	4b38      	ldr	r3, [pc, #224]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a12:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a3a      	ldr	r2, [pc, #232]	@ (8002b00 <HAL_RCC_OscConfig+0x630>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	431a      	orrs	r2, r3
 8002a26:	4b32      	ldr	r3, [pc, #200]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0449      	lsls	r1, r1, #17
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fc6b 	bl	8001314 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fc66 	bl	8001314 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e047      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a56:	4b26      	ldr	r3, [pc, #152]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	@ 0x80
 8002a5c:	049b      	lsls	r3, r3, #18
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x574>
 8002a62:	e03f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a6a:	4924      	ldr	r1, [pc, #144]	@ (8002afc <HAL_RCC_OscConfig+0x62c>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fc50 	bl	8001314 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fc4b 	bl	8001314 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e02c      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	049b      	lsls	r3, r3, #18
 8002a94:	4013      	ands	r3, r2
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5aa>
 8002a98:	e024      	b.n	8002ae4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e01f      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_RCC_OscConfig+0x620>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	025b      	lsls	r3, r3, #9
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	23f0      	movs	r3, #240	@ 0xf0
 8002ad4:	039b      	lsls	r3, r3, #14
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b008      	add	sp, #32
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	40021000 	.word	0x40021000
 8002af4:	00001388 	.word	0x00001388
 8002af8:	efffffff 	.word	0xefffffff
 8002afc:	feffffff 	.word	0xfeffffff
 8002b00:	ffc2ffff 	.word	0xffc2ffff

08002b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b3      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b5b      	ldr	r3, [pc, #364]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d911      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b58      	ldr	r3, [pc, #352]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	4b55      	ldr	r3, [pc, #340]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b38:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e09a      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4013      	ands	r3, r2
 8002b52:	d015      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d006      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4b4a      	ldr	r3, [pc, #296]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002b64:	21e0      	movs	r1, #224	@ 0xe0
 8002b66:	00c9      	lsls	r1, r1, #3
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	22f0      	movs	r2, #240	@ 0xf0
 8002b72:	4393      	bics	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d114      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06e      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b38      	ldr	r3, [pc, #224]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	049b      	lsls	r3, r3, #18
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e062      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e05b      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc8:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2203      	movs	r2, #3
 8002bce:	4393      	bics	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fb9a 	bl	8001314 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be4:	e009      	b.n	8002bfa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be6:	f7fe fb95 	bl	8001314 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <HAL_RCC_ClockConfig+0x18c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e042      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	220c      	movs	r2, #12
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1ec      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d211      	bcs.n	8002c3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4393      	bics	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2c:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <HAL_RCC_ClockConfig+0x184>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e020      	b.n	8002c80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2204      	movs	r2, #4
 8002c44:	4013      	ands	r3, r2
 8002c46:	d009      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a11      	ldr	r2, [pc, #68]	@ (8002c94 <HAL_RCC_ClockConfig+0x190>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c5c:	f000 f820 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c60:	0001      	movs	r1, r0
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <HAL_RCC_ClockConfig+0x188>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	220f      	movs	r2, #15
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_RCC_ClockConfig+0x194>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	000a      	movs	r2, r1
 8002c72:	40da      	lsrs	r2, r3
 8002c74:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x198>)
 8002c76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c78:	2003      	movs	r0, #3
 8002c7a:	f7fe fb05 	bl	8001288 <HAL_InitTick>
  
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	0018      	movs	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	00001388 	.word	0x00001388
 8002c94:	fffff8ff 	.word	0xfffff8ff
 8002c98:	08003734 	.word	0x08003734
 8002c9c:	20000000 	.word	0x20000000

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cce:	e02c      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cd2:	613b      	str	r3, [r7, #16]
      break;
 8002cd4:	e02c      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0c9b      	lsrs	r3, r3, #18
 8002cda:	220f      	movs	r2, #15
 8002cdc:	4013      	ands	r3, r2
 8002cde:	4a19      	ldr	r2, [pc, #100]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ce0:	5cd3      	ldrb	r3, [r2, r3]
 8002ce2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ce4:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	220f      	movs	r2, #15
 8002cea:	4013      	ands	r3, r2
 8002cec:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	025b      	lsls	r3, r3, #9
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4810      	ldr	r0, [pc, #64]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d00:	f7fd fa02 	bl	8000108 <__udivsi3>
 8002d04:	0003      	movs	r3, r0
 8002d06:	001a      	movs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4353      	muls	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e009      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	000a      	movs	r2, r1
 8002d14:	0152      	lsls	r2, r2, #5
 8002d16:	1a52      	subs	r2, r2, r1
 8002d18:	0193      	lsls	r3, r2, #6
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	185b      	adds	r3, r3, r1
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d2c:	613b      	str	r3, [r7, #16]
      break;
 8002d2e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d30:	693b      	ldr	r3, [r7, #16]
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b006      	add	sp, #24
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	007a1200 	.word	0x007a1200
 8002d44:	08003744 	.word	0x08003744
 8002d48:	08003754 	.word	0x08003754

08002d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	4013      	ands	r3, r2
 8002d66:	d100      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d68:	e08e      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d6a:	2017      	movs	r0, #23
 8002d6c:	183b      	adds	r3, r7, r0
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d72:	4b57      	ldr	r3, [pc, #348]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	055b      	lsls	r3, r3, #21
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d110      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b54      	ldr	r3, [pc, #336]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	4b53      	ldr	r3, [pc, #332]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d84:	2180      	movs	r1, #128	@ 0x80
 8002d86:	0549      	lsls	r1, r1, #21
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	61da      	str	r2, [r3, #28]
 8002d8c:	4b50      	ldr	r3, [pc, #320]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	055b      	lsls	r3, r3, #21
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d11a      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dac:	4b49      	ldr	r3, [pc, #292]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b48      	ldr	r3, [pc, #288]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002db2:	2180      	movs	r1, #128	@ 0x80
 8002db4:	0049      	lsls	r1, r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe faab 	bl	8001314 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe faa6 	bl	8001314 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e077      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	23c0      	movs	r3, #192	@ 0xc0
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d034      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	23c0      	movs	r3, #192	@ 0xc0
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d02c      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e04:	4b32      	ldr	r3, [pc, #200]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4a33      	ldr	r2, [pc, #204]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e0e:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e14:	2180      	movs	r1, #128	@ 0x80
 8002e16:	0249      	lsls	r1, r1, #9
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e22:	492e      	ldr	r1, [pc, #184]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e28:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fa6d 	bl	8001314 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fa68 	bl	8001314 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	4a25      	ldr	r2, [pc, #148]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e038      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4b18      	ldr	r3, [pc, #96]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e72:	2317      	movs	r3, #23
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b14      	ldr	r3, [pc, #80]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e82:	4918      	ldr	r1, [pc, #96]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	2203      	movs	r2, #3
 8002e98:	4393      	bics	r3, r2
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4013      	ands	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eb0:	4b07      	ldr	r3, [pc, #28]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b006      	add	sp, #24
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	fffffcff 	.word	0xfffffcff
 8002edc:	fffeffff 	.word	0xfffeffff
 8002ee0:	00001388 	.word	0x00001388
 8002ee4:	efffffff 	.word	0xefffffff

08002ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e042      	b.n	8002f80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223d      	movs	r2, #61	@ 0x3d
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223c      	movs	r2, #60	@ 0x3c
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fe f929 	bl	8001168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223d      	movs	r2, #61	@ 0x3d
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	0019      	movs	r1, r3
 8002f28:	0010      	movs	r0, r2
 8002f2a:	f000 fa55 	bl	80033d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2246      	movs	r2, #70	@ 0x46
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	223e      	movs	r2, #62	@ 0x3e
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	223f      	movs	r2, #63	@ 0x3f
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2240      	movs	r2, #64	@ 0x40
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2241      	movs	r2, #65	@ 0x41
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2242      	movs	r2, #66	@ 0x42
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2243      	movs	r2, #67	@ 0x43
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2244      	movs	r2, #68	@ 0x44
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2245      	movs	r2, #69	@ 0x45
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	223d      	movs	r2, #61	@ 0x3d
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	223d      	movs	r2, #61	@ 0x3d
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e030      	b.n	8003002 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	223d      	movs	r2, #61	@ 0x3d
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a13      	ldr	r2, [pc, #76]	@ (800300c <HAL_TIM_Base_Start_IT+0x84>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0x44>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <HAL_TIM_Base_Start_IT+0x88>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d111      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2207      	movs	r2, #7
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d010      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e007      	b.n	8003000 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400

08003014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2202      	movs	r2, #2
 8003030:	4013      	ands	r3, r2
 8003032:	d021      	beq.n	8003078 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2202      	movs	r2, #2
 8003038:	4013      	ands	r3, r2
 800303a:	d01d      	beq.n	8003078 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2203      	movs	r2, #3
 8003042:	4252      	negs	r2, r2
 8003044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2203      	movs	r2, #3
 8003054:	4013      	ands	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f9a4 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 8003060:	e007      	b.n	8003072 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f997 	bl	8003398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f9a3 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2204      	movs	r2, #4
 800307c:	4013      	ands	r3, r2
 800307e:	d022      	beq.n	80030c6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d01e      	beq.n	80030c6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2205      	movs	r2, #5
 800308e:	4252      	negs	r2, r2
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	23c0      	movs	r3, #192	@ 0xc0
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 f97d 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 80030ae:	e007      	b.n	80030c0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f970 	bl	8003398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f97c 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2208      	movs	r2, #8
 80030ca:	4013      	ands	r3, r2
 80030cc:	d021      	beq.n	8003112 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2208      	movs	r2, #8
 80030d2:	4013      	ands	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2209      	movs	r2, #9
 80030dc:	4252      	negs	r2, r2
 80030de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2204      	movs	r2, #4
 80030e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2203      	movs	r2, #3
 80030ee:	4013      	ands	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f957 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 80030fa:	e007      	b.n	800310c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f94a 	bl	8003398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f956 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2210      	movs	r2, #16
 8003116:	4013      	ands	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2210      	movs	r2, #16
 800311e:	4013      	ands	r3, r2
 8003120:	d01e      	beq.n	8003160 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2211      	movs	r2, #17
 8003128:	4252      	negs	r2, r2
 800312a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2208      	movs	r2, #8
 8003130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	23c0      	movs	r3, #192	@ 0xc0
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0018      	movs	r0, r3
 8003144:	f000 f930 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 8003148:	e007      	b.n	800315a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f923 	bl	8003398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	0018      	movs	r0, r3
 8003156:	f000 f92f 	bl	80033b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2201      	movs	r2, #1
 8003164:	4013      	ands	r3, r2
 8003166:	d00c      	beq.n	8003182 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	d008      	beq.n	8003182 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	4252      	negs	r2, r2
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd ff53 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2280      	movs	r2, #128	@ 0x80
 8003186:	4013      	ands	r3, r2
 8003188:	d00c      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2280      	movs	r2, #128	@ 0x80
 800318e:	4013      	ands	r3, r2
 8003190:	d008      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2281      	movs	r2, #129	@ 0x81
 8003198:	4252      	negs	r2, r2
 800319a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 fa88 	bl	80036b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2240      	movs	r2, #64	@ 0x40
 80031a8:	4013      	ands	r3, r2
 80031aa:	d00c      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	4013      	ands	r3, r2
 80031b2:	d008      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2241      	movs	r2, #65	@ 0x41
 80031ba:	4252      	negs	r2, r2
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f901 	bl	80033c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	d00c      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d008      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2221      	movs	r2, #33	@ 0x21
 80031dc:	4252      	negs	r2, r2
 80031de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fa5e 	bl	80036a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b004      	add	sp, #16
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	230f      	movs	r3, #15
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223c      	movs	r2, #60	@ 0x3c
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_TIM_ConfigClockSource+0x20>
 800320c:	2302      	movs	r3, #2
 800320e:	e0bc      	b.n	800338a <HAL_TIM_ConfigClockSource+0x19a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	223c      	movs	r2, #60	@ 0x3c
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	223d      	movs	r2, #61	@ 0x3d
 800321c:	2102      	movs	r1, #2
 800321e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2277      	movs	r2, #119	@ 0x77
 800322c:	4393      	bics	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2280      	movs	r2, #128	@ 0x80
 8003246:	0192      	lsls	r2, r2, #6
 8003248:	4293      	cmp	r3, r2
 800324a:	d040      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xde>
 800324c:	2280      	movs	r2, #128	@ 0x80
 800324e:	0192      	lsls	r2, r2, #6
 8003250:	4293      	cmp	r3, r2
 8003252:	d900      	bls.n	8003256 <HAL_TIM_ConfigClockSource+0x66>
 8003254:	e088      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	0152      	lsls	r2, r2, #5
 800325a:	4293      	cmp	r3, r2
 800325c:	d100      	bne.n	8003260 <HAL_TIM_ConfigClockSource+0x70>
 800325e:	e088      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x182>
 8003260:	2280      	movs	r2, #128	@ 0x80
 8003262:	0152      	lsls	r2, r2, #5
 8003264:	4293      	cmp	r3, r2
 8003266:	d900      	bls.n	800326a <HAL_TIM_ConfigClockSource+0x7a>
 8003268:	e07e      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 800326a:	2b70      	cmp	r3, #112	@ 0x70
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_ConfigClockSource+0xb0>
 800326e:	d900      	bls.n	8003272 <HAL_TIM_ConfigClockSource+0x82>
 8003270:	e07a      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 8003272:	2b60      	cmp	r3, #96	@ 0x60
 8003274:	d04f      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x126>
 8003276:	d900      	bls.n	800327a <HAL_TIM_ConfigClockSource+0x8a>
 8003278:	e076      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 800327a:	2b50      	cmp	r3, #80	@ 0x50
 800327c:	d03b      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x106>
 800327e:	d900      	bls.n	8003282 <HAL_TIM_ConfigClockSource+0x92>
 8003280:	e072      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 8003282:	2b40      	cmp	r3, #64	@ 0x40
 8003284:	d057      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x146>
 8003286:	d900      	bls.n	800328a <HAL_TIM_ConfigClockSource+0x9a>
 8003288:	e06e      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 800328a:	2b30      	cmp	r3, #48	@ 0x30
 800328c:	d063      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x166>
 800328e:	d86b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d060      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x166>
 8003294:	d868      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d05d      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x166>
 800329a:	2b10      	cmp	r3, #16
 800329c:	d05b      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x166>
 800329e:	e063      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032b0:	f000 f986 	bl	80035c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2277      	movs	r2, #119	@ 0x77
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]
      break;
 80032cc:	e052      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	f000 f96f 	bl	80035c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2180      	movs	r1, #128	@ 0x80
 80032ee:	01c9      	lsls	r1, r1, #7
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]
      break;
 80032f4:	e03e      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	001a      	movs	r2, r3
 8003304:	f000 f8e2 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2150      	movs	r1, #80	@ 0x50
 800330e:	0018      	movs	r0, r3
 8003310:	f000 f93c 	bl	800358c <TIM_ITRx_SetConfig>
      break;
 8003314:	e02e      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003322:	001a      	movs	r2, r3
 8003324:	f000 f900 	bl	8003528 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2160      	movs	r1, #96	@ 0x60
 800332e:	0018      	movs	r0, r3
 8003330:	f000 f92c 	bl	800358c <TIM_ITRx_SetConfig>
      break;
 8003334:	e01e      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	001a      	movs	r2, r3
 8003344:	f000 f8c2 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2140      	movs	r1, #64	@ 0x40
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f91c 	bl	800358c <TIM_ITRx_SetConfig>
      break;
 8003354:	e00e      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f000 f913 	bl	800358c <TIM_ITRx_SetConfig>
      break;
 8003366:	e005      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003368:	230f      	movs	r3, #15
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
      break;
 8003370:	e000      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003372:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	223d      	movs	r2, #61	@ 0x3d
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	223c      	movs	r2, #60	@ 0x3c
 8003380:	2100      	movs	r1, #0
 8003382:	5499      	strb	r1, [r3, r2]

  return status;
 8003384:	230f      	movs	r3, #15
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	781b      	ldrb	r3, [r3, #0]
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b004      	add	sp, #16
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	ffff00ff 	.word	0xffff00ff

08003398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d0:	46c0      	nop			@ (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a32      	ldr	r2, [pc, #200]	@ (80034b4 <TIM_Base_SetConfig+0xdc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0x20>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a31      	ldr	r2, [pc, #196]	@ (80034b8 <TIM_Base_SetConfig+0xe0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d108      	bne.n	800340a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2270      	movs	r2, #112	@ 0x70
 80033fc:	4393      	bics	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <TIM_Base_SetConfig+0xdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00f      	beq.n	8003432 <TIM_Base_SetConfig+0x5a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a28      	ldr	r2, [pc, #160]	@ (80034b8 <TIM_Base_SetConfig+0xe0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0x5a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a27      	ldr	r2, [pc, #156]	@ (80034bc <TIM_Base_SetConfig+0xe4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x5a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a26      	ldr	r2, [pc, #152]	@ (80034c0 <TIM_Base_SetConfig+0xe8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x5a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <TIM_Base_SetConfig+0xec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a24      	ldr	r2, [pc, #144]	@ (80034c8 <TIM_Base_SetConfig+0xf0>)
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	4393      	bics	r3, r2
 800344a:	001a      	movs	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a11      	ldr	r2, [pc, #68]	@ (80034b4 <TIM_Base_SetConfig+0xdc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <TIM_Base_SetConfig+0xaa>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <TIM_Base_SetConfig+0xe8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_Base_SetConfig+0xaa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <TIM_Base_SetConfig+0xec>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d103      	bne.n	800348a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2201      	movs	r2, #1
 80034a2:	4393      	bics	r3, r2
 80034a4:	001a      	movs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]
  }
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b004      	add	sp, #16
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40002000 	.word	0x40002000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800
 80034c8:	fffffcff 	.word	0xfffffcff

080034cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4393      	bics	r3, r2
 80034e6:	001a      	movs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	22f0      	movs	r2, #240	@ 0xf0
 80034f6:	4393      	bics	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	220a      	movs	r2, #10
 8003508:	4393      	bics	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b006      	add	sp, #24
 8003526:	bd80      	pop	{r7, pc}

08003528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	2210      	movs	r2, #16
 8003540:	4393      	bics	r3, r2
 8003542:	001a      	movs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4a0d      	ldr	r2, [pc, #52]	@ (8003588 <TIM_TI2_ConfigInputStage+0x60>)
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	22a0      	movs	r2, #160	@ 0xa0
 8003564:	4393      	bics	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b006      	add	sp, #24
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	ffff0fff 	.word	0xffff0fff

0800358c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2270      	movs	r2, #112	@ 0x70
 80035a0:	4393      	bics	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	2207      	movs	r2, #7
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	609a      	str	r2, [r3, #8]
}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4a09      	ldr	r2, [pc, #36]	@ (80035fc <TIM_ETR_SetConfig+0x3c>)
 80035d8:	4013      	ands	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b006      	add	sp, #24
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	ffff00ff 	.word	0xffff00ff

08003600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	223c      	movs	r2, #60	@ 0x3c
 800360e:	5c9b      	ldrb	r3, [r3, r2]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003614:	2302      	movs	r3, #2
 8003616:	e03c      	b.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	223c      	movs	r2, #60	@ 0x3c
 800361c:	2101      	movs	r1, #1
 800361e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	223d      	movs	r2, #61	@ 0x3d
 8003624:	2102      	movs	r1, #2
 8003626:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2270      	movs	r2, #112	@ 0x70
 800363c:	4393      	bics	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a11      	ldr	r2, [pc, #68]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0f      	ldr	r2, [pc, #60]	@ (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10c      	bne.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2280      	movs	r2, #128	@ 0x80
 800366a:	4393      	bics	r3, r2
 800366c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4313      	orrs	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	223d      	movs	r2, #61	@ 0x3d
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	223c      	movs	r2, #60	@ 0x3c
 800368c:	2100      	movs	r1, #0
 800368e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40000400 	.word	0x40000400

080036a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <memset>:
 80036c4:	0003      	movs	r3, r0
 80036c6:	1882      	adds	r2, r0, r2
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d100      	bne.n	80036ce <memset+0xa>
 80036cc:	4770      	bx	lr
 80036ce:	7019      	strb	r1, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	e7f9      	b.n	80036c8 <memset+0x4>

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2600      	movs	r6, #0
 80036d8:	4c0c      	ldr	r4, [pc, #48]	@ (800370c <__libc_init_array+0x38>)
 80036da:	4d0d      	ldr	r5, [pc, #52]	@ (8003710 <__libc_init_array+0x3c>)
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	2600      	movs	r6, #0
 80036e6:	f000 f819 	bl	800371c <_init>
 80036ea:	4c0a      	ldr	r4, [pc, #40]	@ (8003714 <__libc_init_array+0x40>)
 80036ec:	4d0a      	ldr	r5, [pc, #40]	@ (8003718 <__libc_init_array+0x44>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	00b3      	lsls	r3, r6, #2
 80036fa:	58eb      	ldr	r3, [r5, r3]
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	00b3      	lsls	r3, r6, #2
 8003704:	58eb      	ldr	r3, [r5, r3]
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08003764 	.word	0x08003764
 8003710:	08003764 	.word	0x08003764
 8003714:	08003768 	.word	0x08003768
 8003718:	08003764 	.word	0x08003764

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
