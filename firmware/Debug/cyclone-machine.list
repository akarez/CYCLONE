
cyclone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f4c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800200c  0800200c  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800203c  0800203c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800203c  0800203c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800203c  0800203c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800203c  0800203c  0000303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002040  08002040  00003040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002044  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002050  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002050  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f1f  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001778  00000000  00000000  0000cf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0000e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080e  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f05d  00000000  00000000  0000f936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c699  00000000  00000000  0001e993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cb0d  00000000  00000000  0002b02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00087b39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000251c  00000000  00000000  00087b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0008a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ff4 	.word	0x08001ff4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ff4 	.word	0x08001ff4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  HAL_Init();
 8000224:	f000 fa4c 	bl	80006c0 <HAL_Init>

  SystemClock_Config();
 8000228:	f000 f82e 	bl	8000288 <SystemClock_Config>

  MX_GPIO_Init();
 800022c:	f000 f910 	bl	8000450 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f882 	bl	8000338 <MX_I2C1_Init>
  MX_TIM14_Init();
 8000234:	f000 f8c0 	bl	80003b8 <MX_TIM14_Init>

  HAL_GPIO_WritePin(GPIOA, FAN2_Pin, GPIO_PIN_SET);
 8000238:	2390      	movs	r3, #144	@ 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2201      	movs	r2, #1
 800023e:	2180      	movs	r1, #128	@ 0x80
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fce9 	bl	8000c18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, FAN1_Pin, GPIO_PIN_SET);
 8000246:	2390      	movs	r3, #144	@ 0x90
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2201      	movs	r2, #1
 800024c:	2140      	movs	r1, #64	@ 0x40
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fce2 	bl	8000c18 <HAL_GPIO_WritePin>

  while (1) {
	  /* debug led ON */
	  HAL_GPIO_WritePin(GPIOA, STAT_LED_Pin, GPIO_PIN_SET);
 8000254:	2390      	movs	r3, #144	@ 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2201      	movs	r2, #1
 800025a:	2120      	movs	r1, #32
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fcdb 	bl	8000c18 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000262:	23fa      	movs	r3, #250	@ 0xfa
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fa8e 	bl	8000788 <HAL_Delay>
	   * 	   status led off
	   *
	   */

	  /* debug led OFF*/
	  HAL_GPIO_WritePin(GPIOA, STAT_LED_Pin, GPIO_PIN_RESET);
 800026c:	2390      	movs	r3, #144	@ 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2200      	movs	r2, #0
 8000272:	2120      	movs	r1, #32
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fccf 	bl	8000c18 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800027a:	23fa      	movs	r3, #250	@ 0xfa
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fa82 	bl	8000788 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, STAT_LED_Pin, GPIO_PIN_SET);
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	e7e5      	b.n	8000254 <main+0x34>

08000288 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b095      	sub	sp, #84	@ 0x54
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2420      	movs	r4, #32
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2330      	movs	r3, #48	@ 0x30
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f001 fe7f 	bl	8001f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	2310      	movs	r3, #16
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	2310      	movs	r3, #16
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f001 fe77 	bl	8001f9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f001 fe70 	bl	8001f9c <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	0021      	movs	r1, r4
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2202      	movs	r2, #2
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2201      	movs	r2, #1
 80002c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2210      	movs	r2, #16
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fdf9 	bl	8000ed0 <HAL_RCC_OscConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002e2:	f000 f90d 	bl	8000500 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	2110      	movs	r1, #16
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2207      	movs	r2, #7
 80002ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2100      	movs	r1, #0
 8000304:	0018      	movs	r0, r3
 8000306:	f001 f8fd 	bl	8001504 <HAL_RCC_ClockConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800030e:	f000 f8f7 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000312:	003b      	movs	r3, r7
 8000314:	2220      	movs	r2, #32
 8000316:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fa13 	bl	800174c <HAL_RCCEx_PeriphCLKConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800032a:	f000 f8e9 	bl	8000500 <Error_Handler>
  }
}
 800032e:	46c0      	nop			@ (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b015      	add	sp, #84	@ 0x54
 8000334:	bd90      	pop	{r4, r7, pc}
	...

08000338 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800033c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ac <MX_I2C1_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	@ (80003b0 <MX_I2C1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000342:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000344:	4a1b      	ldr	r2, [pc, #108]	@ (80003b4 <MX_I2C1_Init+0x7c>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000348:	4b18      	ldr	r3, [pc, #96]	@ (80003ac <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000350:	2201      	movs	r2, #1
 8000352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000366:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fc6d 	bl	8000c54 <HAL_I2C_Init>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C1_Init+0x4a>
    Error_Handler();
 800037e:	f000 f8bf 	bl	8000500 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000382:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000384:	2100      	movs	r1, #0
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fd0a 	bl	8000da0 <HAL_I2CEx_ConfigAnalogFilter>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8000390:	f000 f8b6 	bl	8000500 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000394:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000396:	2100      	movs	r1, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fd4d 	bl	8000e38 <HAL_I2CEx_ConfigDigitalFilter>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x6e>
    Error_Handler();
 80003a2:	f000 f8ad 	bl	8000500 <Error_Handler>
  }
}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000028 	.word	0x20000028
 80003b0:	40005400 	.word	0x40005400
 80003b4:	2000090e 	.word	0x2000090e

080003b8 <MX_TIM14_Init>:
/**
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	0018      	movs	r0, r3
 80003c2:	231c      	movs	r3, #28
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f001 fde8 	bl	8001f9c <memset>

  htim14.Instance = TIM14;
 80003cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000448 <MX_TIM14_Init+0x90>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80003d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003e0:	4a1a      	ldr	r2, [pc, #104]	@ (800044c <MX_TIM14_Init+0x94>)
 80003e2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b17      	ldr	r3, [pc, #92]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ea:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_TIM14_Init+0x8c>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fa78 	bl	80018e8 <HAL_TIM_Base_Init>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM14_Init+0x48>
    Error_Handler();
 80003fc:	f000 f880 	bl	8000500 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK) {
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <MX_TIM14_Init+0x8c>)
 8000402:	0018      	movs	r0, r3
 8000404:	f001 fac0 	bl	8001988 <HAL_TIM_OC_Init>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM14_Init+0x58>
    Error_Handler();
 800040c:	f000 f878 	bl	8000500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000428:	1d39      	adds	r1, r7, #4
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_TIM14_Init+0x8c>)
 800042c:	2200      	movs	r2, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f001 fb02 	bl	8001a38 <HAL_TIM_OC_ConfigChannel>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_TIM14_Init+0x84>
    Error_Handler();
 8000438:	f000 f862 	bl	8000500 <Error_Handler>
  }
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b008      	add	sp, #32
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000007c 	.word	0x2000007c
 8000448:	40002000 	.word	0x40002000
 800044c:	0000ffff 	.word	0x0000ffff

08000450 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b089      	sub	sp, #36	@ 0x24
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	240c      	movs	r4, #12
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2314      	movs	r3, #20
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f001 fd9b 	bl	8001f9c <memset>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_GPIO_Init+0xa8>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <MX_GPIO_Init+0xa8>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	0289      	lsls	r1, r1, #10
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b20      	ldr	r3, [pc, #128]	@ (80004f8 <MX_GPIO_Init+0xa8>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	029b      	lsls	r3, r3, #10
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b1d      	ldr	r3, [pc, #116]	@ (80004f8 <MX_GPIO_Init+0xa8>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <MX_GPIO_Init+0xa8>)
 8000488:	2180      	movs	r1, #128	@ 0x80
 800048a:	02c9      	lsls	r1, r1, #11
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <MX_GPIO_Init+0xa8>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	02db      	lsls	r3, r3, #11
 8000498:	4013      	ands	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, STAT_LED_Pin|FAN1_Pin|FAN2_Pin, GPIO_PIN_RESET);
 800049e:	2390      	movs	r3, #144	@ 0x90
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2200      	movs	r2, #0
 80004a4:	21e0      	movs	r1, #224	@ 0xe0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fbb6 	bl	8000c18 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = STAT_LED_Pin|FAN1_Pin|FAN2_Pin;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	22e0      	movs	r2, #224	@ 0xe0
 80004b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2201      	movs	r2, #1
 80004b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	193a      	adds	r2, r7, r4
 80004c6:	2390      	movs	r3, #144	@ 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fa33 	bl	8000938 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ALERT_Pin;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALERT_GPIO_Port, &GPIO_InitStruct);
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <MX_GPIO_Init+0xac>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f000 fa24 	bl	8000938 <HAL_GPIO_Init>
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b009      	add	sp, #36	@ 0x24
 80004f6:	bd90      	pop	{r4, r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400

08000500 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1) {
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <HAL_MspInit+0x44>)
 8000514:	699a      	ldr	r2, [r3, #24]
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <HAL_MspInit+0x44>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	619a      	str	r2, [r3, #24]
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <HAL_MspInit+0x44>)
 800052c:	69da      	ldr	r2, [r3, #28]
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <HAL_MspInit+0x44>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	0549      	lsls	r1, r1, #21
 8000534:	430a      	orrs	r2, r1
 8000536:	61da      	str	r2, [r3, #28]
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <HAL_MspInit+0x44>)
 800053a:	69da      	ldr	r2, [r3, #28]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	055b      	lsls	r3, r3, #21
 8000540:	4013      	ands	r3, r2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08b      	sub	sp, #44	@ 0x2c
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	2414      	movs	r4, #20
 800055e:	193b      	adds	r3, r7, r4
 8000560:	0018      	movs	r0, r3
 8000562:	2314      	movs	r3, #20
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f001 fd18 	bl	8001f9c <memset>
  if(hi2c->Instance==I2C1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <HAL_I2C_MspInit+0x94>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d133      	bne.n	80005de <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b1d      	ldr	r3, [pc, #116]	@ (80005ec <HAL_I2C_MspInit+0x98>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <HAL_I2C_MspInit+0x98>)
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	0289      	lsls	r1, r1, #10
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <HAL_I2C_MspInit+0x98>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	2380      	movs	r3, #128	@ 0x80
 800058a:	029b      	lsls	r3, r3, #10
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	22c0      	movs	r2, #192	@ 0xc0
 8000596:	00d2      	lsls	r2, r2, #3
 8000598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059a:	0021      	movs	r1, r4
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2212      	movs	r2, #18
 80005a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2203      	movs	r2, #3
 80005ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2204      	movs	r2, #4
 80005b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	187a      	adds	r2, r7, r1
 80005b6:	2390      	movs	r3, #144	@ 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 f9bb 	bl	8000938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <HAL_I2C_MspInit+0x98>)
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_I2C_MspInit+0x98>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0389      	lsls	r1, r1, #14
 80005cc:	430a      	orrs	r2, r1
 80005ce:	61da      	str	r2, [r3, #28]
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_I2C_MspInit+0x98>)
 80005d2:	69da      	ldr	r2, [r3, #28]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	039b      	lsls	r3, r3, #14
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b00b      	add	sp, #44	@ 0x2c
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <HAL_TIM_Base_MspInit+0x38>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d10d      	bne.n	800061e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <HAL_TIM_Base_MspInit+0x3c>)
 8000604:	69da      	ldr	r2, [r3, #28]
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <HAL_TIM_Base_MspInit+0x3c>)
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	0049      	lsls	r1, r1, #1
 800060c:	430a      	orrs	r2, r1
 800060e:	61da      	str	r2, [r3, #28]
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_TIM_Base_MspInit+0x3c>)
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	40002000 	.word	0x40002000
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	e7fd      	b.n	8000634 <NMI_Handler+0x4>

08000638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <HardFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 f87a 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff fff7 	bl	8000662 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	@ (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	@ (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	@ (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f001 fc87 	bl	8001fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fdbf 	bl	8000220 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	08002044 	.word	0x08002044
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	200000c8 	.word	0x200000c8

080006bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_IRQHandler>
	...

080006c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <HAL_Init+0x24>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HAL_Init+0x24>)
 80006ca:	2110      	movs	r1, #16
 80006cc:	430a      	orrs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f809 	bl	80006e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d6:	f7ff ff19 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <HAL_InitTick+0x5c>)
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_InitTick+0x60>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0019      	movs	r1, r3
 80006fa:	23fa      	movs	r3, #250	@ 0xfa
 80006fc:	0098      	lsls	r0, r3, #2
 80006fe:	f7ff fd03 	bl	8000108 <__udivsi3>
 8000702:	0003      	movs	r3, r0
 8000704:	0019      	movs	r1, r3
 8000706:	0020      	movs	r0, r4
 8000708:	f7ff fcfe 	bl	8000108 <__udivsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f905 	bl	800091e <HAL_SYSTICK_Config>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e00f      	b.n	800073c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d80b      	bhi.n	800073a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8e2 	bl	80008f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_InitTick+0x64>)
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b003      	add	sp, #12
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	001a      	movs	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	18d2      	adds	r2, r2, r3
 8000760:	4b03      	ldr	r3, [pc, #12]	@ (8000770 <HAL_IncTick+0x20>)
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	20000008 	.word	0x20000008
 8000770:	200000c4 	.word	0x200000c4

08000774 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	@ (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	200000c4 	.word	0x200000c4

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff fff0 	bl	8000774 <HAL_GetTick>
 8000794:	0003      	movs	r3, r0
 8000796:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_Delay+0x44>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	001a      	movs	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	189b      	adds	r3, r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	f7ff ffe0 	bl	8000774 <HAL_GetTick>
 80007b4:	0002      	movs	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b004      	add	sp, #16
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000008 	.word	0x20000008

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	0002      	movs	r2, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80007e4:	d828      	bhi.n	8000838 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e6:	4a2f      	ldr	r2, [pc, #188]	@ (80008a4 <__NVIC_SetPriority+0xd4>)
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	33c0      	adds	r3, #192	@ 0xc0
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	589b      	ldr	r3, [r3, r2]
 80007f6:	1dfa      	adds	r2, r7, #7
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	0011      	movs	r1, r2
 80007fc:	2203      	movs	r2, #3
 80007fe:	400a      	ands	r2, r1
 8000800:	00d2      	lsls	r2, r2, #3
 8000802:	21ff      	movs	r1, #255	@ 0xff
 8000804:	4091      	lsls	r1, r2
 8000806:	000a      	movs	r2, r1
 8000808:	43d2      	mvns	r2, r2
 800080a:	401a      	ands	r2, r3
 800080c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	019b      	lsls	r3, r3, #6
 8000812:	22ff      	movs	r2, #255	@ 0xff
 8000814:	401a      	ands	r2, r3
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	0018      	movs	r0, r3
 800081c:	2303      	movs	r3, #3
 800081e:	4003      	ands	r3, r0
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000824:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <__NVIC_SetPriority+0xd4>)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b25b      	sxtb	r3, r3
 800082c:	089b      	lsrs	r3, r3, #2
 800082e:	430a      	orrs	r2, r1
 8000830:	33c0      	adds	r3, #192	@ 0xc0
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000836:	e031      	b.n	800089c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000838:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <__NVIC_SetPriority+0xd8>)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	0019      	movs	r1, r3
 8000840:	230f      	movs	r3, #15
 8000842:	400b      	ands	r3, r1
 8000844:	3b08      	subs	r3, #8
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	3306      	adds	r3, #6
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	3304      	adds	r3, #4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	2203      	movs	r2, #3
 800085a:	400a      	ands	r2, r1
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	21ff      	movs	r1, #255	@ 0xff
 8000860:	4091      	lsls	r1, r2
 8000862:	000a      	movs	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	401a      	ands	r2, r3
 8000868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	22ff      	movs	r2, #255	@ 0xff
 8000870:	401a      	ands	r2, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	2303      	movs	r3, #3
 800087a:	4003      	ands	r3, r0
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	4809      	ldr	r0, [pc, #36]	@ (80008a8 <__NVIC_SetPriority+0xd8>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001c      	movs	r4, r3
 8000888:	230f      	movs	r3, #15
 800088a:	4023      	ands	r3, r4
 800088c:	3b08      	subs	r3, #8
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	430a      	orrs	r2, r1
 8000892:	3306      	adds	r3, #6
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	18c3      	adds	r3, r0, r3
 8000898:	3304      	adds	r3, #4
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b003      	add	sp, #12
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	045b      	lsls	r3, r3, #17
 80008bc:	429a      	cmp	r2, r3
 80008be:	d301      	bcc.n	80008c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c0:	2301      	movs	r3, #1
 80008c2:	e010      	b.n	80008e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <SysTick_Config+0x44>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	3a01      	subs	r2, #1
 80008ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	2103      	movs	r1, #3
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff ff7c 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <SysTick_Config+0x44>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Config+0x44>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	0018      	movs	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	210f      	movs	r1, #15
 8000900:	187b      	adds	r3, r7, r1
 8000902:	1c02      	adds	r2, r0, #0
 8000904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	187b      	adds	r3, r7, r1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ff5d 	bl	80007d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b004      	add	sp, #16
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ffbf 	bl	80008ac <SysTick_Config>
 800092e:	0003      	movs	r3, r0
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e14f      	b.n	8000be8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d100      	bne.n	8000960 <HAL_GPIO_Init+0x28>
 800095e:	e140      	b.n	8000be2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2203      	movs	r2, #3
 8000966:	4013      	ands	r3, r2
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2203      	movs	r2, #3
 8000972:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	409a      	lsls	r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	43da      	mvns	r2, r3
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	43da      	mvns	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	2201      	movs	r2, #1
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2203      	movs	r2, #3
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	58d3      	ldr	r3, [r2, r3]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2207      	movs	r2, #7
 8000a34:	4013      	ands	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	400b      	ands	r3, r1
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	6939      	ldr	r1, [r7, #16]
 8000a68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	23c0      	movs	r3, #192	@ 0xc0
 8000aa4:	029b      	lsls	r3, r3, #10
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d100      	bne.n	8000aac <HAL_GPIO_Init+0x174>
 8000aaa:	e09a      	b.n	8000be2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b54      	ldr	r3, [pc, #336]	@ (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000aae:	699a      	ldr	r2, [r3, #24]
 8000ab0:	4b53      	ldr	r3, [pc, #332]	@ (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	619a      	str	r2, [r3, #24]
 8000ab8:	4b51      	ldr	r3, [pc, #324]	@ (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	@ (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	589b      	ldr	r3, [r3, r2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	409a      	lsls	r2, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	2390      	movs	r3, #144	@ 0x90
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d013      	beq.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a44      	ldr	r2, [pc, #272]	@ (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d00d      	beq.n	8000b16 <HAL_GPIO_Init+0x1de>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a43      	ldr	r2, [pc, #268]	@ (8000c0c <HAL_GPIO_Init+0x2d4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d007      	beq.n	8000b12 <HAL_GPIO_Init+0x1da>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a42      	ldr	r2, [pc, #264]	@ (8000c10 <HAL_GPIO_Init+0x2d8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x1e4>
 8000b0e:	2305      	movs	r3, #5
 8000b10:	e004      	b.n	8000b1c <HAL_GPIO_Init+0x1e4>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x1e4>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x1e4>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	2103      	movs	r1, #3
 8000b20:	400a      	ands	r2, r1
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	4093      	lsls	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b2c:	4935      	ldr	r1, [pc, #212]	@ (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b3a:	4b36      	ldr	r3, [pc, #216]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	035b      	lsls	r3, r3, #13
 8000b52:	4013      	ands	r3, r2
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b64:	4b2b      	ldr	r3, [pc, #172]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43da      	mvns	r2, r3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	2380      	movs	r3, #128	@ 0x80
 8000b7a:	039b      	lsls	r3, r3, #14
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43da      	mvns	r2, r3
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	2380      	movs	r3, #128	@ 0x80
 8000ba4:	029b      	lsls	r3, r3, #10
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	025b      	lsls	r3, r3, #9
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	40da      	lsrs	r2, r3
 8000bf0:	1e13      	subs	r3, r2, #0
 8000bf2:	d000      	beq.n	8000bf6 <HAL_GPIO_Init+0x2be>
 8000bf4:	e6a8      	b.n	8000948 <HAL_GPIO_Init+0x10>
  } 
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b006      	add	sp, #24
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	0008      	movs	r0, r1
 8000c22:	0011      	movs	r1, r2
 8000c24:	1cbb      	adds	r3, r7, #2
 8000c26:	1c02      	adds	r2, r0, #0
 8000c28:	801a      	strh	r2, [r3, #0]
 8000c2a:	1c7b      	adds	r3, r7, #1
 8000c2c:	1c0a      	adds	r2, r1, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c30:	1c7b      	adds	r3, r7, #1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d004      	beq.n	8000c42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c38:	1cbb      	adds	r3, r7, #2
 8000c3a:	881a      	ldrh	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c40:	e003      	b.n	8000c4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c42:	1cbb      	adds	r3, r7, #2
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e08f      	b.n	8000d86 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2241      	movs	r2, #65	@ 0x41
 8000c6a:	5c9b      	ldrb	r3, [r3, r2]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d107      	bne.n	8000c82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2240      	movs	r2, #64	@ 0x40
 8000c76:	2100      	movs	r1, #0
 8000c78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fc69 	bl	8000554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2241      	movs	r2, #65	@ 0x41
 8000c86:	2124      	movs	r1, #36	@ 0x24
 8000c88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	438a      	bics	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	493b      	ldr	r1, [pc, #236]	@ (8000d90 <HAL_I2C_Init+0x13c>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4938      	ldr	r1, [pc, #224]	@ (8000d94 <HAL_I2C_Init+0x140>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	0209      	lsls	r1, r1, #8
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	e007      	b.n	8000ce2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2184      	movs	r1, #132	@ 0x84
 8000cdc:	0209      	lsls	r1, r1, #8
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d109      	bne.n	8000cfe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	0109      	lsls	r1, r1, #4
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	e007      	b.n	8000d0e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4923      	ldr	r1, [pc, #140]	@ (8000d98 <HAL_I2C_Init+0x144>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4920      	ldr	r1, [pc, #128]	@ (8000d9c <HAL_I2C_Init+0x148>)
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	491a      	ldr	r1, [pc, #104]	@ (8000d94 <HAL_I2C_Init+0x140>)
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69d9      	ldr	r1, [r3, #28]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a1a      	ldr	r2, [r3, #32]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	430a      	orrs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2241      	movs	r2, #65	@ 0x41
 8000d72:	2120      	movs	r1, #32
 8000d74:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2242      	movs	r2, #66	@ 0x42
 8000d80:	2100      	movs	r1, #0
 8000d82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	f0ffffff 	.word	0xf0ffffff
 8000d94:	ffff7fff 	.word	0xffff7fff
 8000d98:	fffff7ff 	.word	0xfffff7ff
 8000d9c:	02008000 	.word	0x02008000

08000da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2241      	movs	r2, #65	@ 0x41
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b20      	cmp	r3, #32
 8000db4:	d138      	bne.n	8000e28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2240      	movs	r2, #64	@ 0x40
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d101      	bne.n	8000dc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e032      	b.n	8000e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2240      	movs	r2, #64	@ 0x40
 8000dc8:	2101      	movs	r1, #1
 8000dca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2241      	movs	r2, #65	@ 0x41
 8000dd0:	2124      	movs	r1, #36	@ 0x24
 8000dd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2101      	movs	r1, #1
 8000de0:	438a      	bics	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4911      	ldr	r1, [pc, #68]	@ (8000e34 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6819      	ldr	r1, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2101      	movs	r1, #1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2241      	movs	r2, #65	@ 0x41
 8000e18:	2120      	movs	r1, #32
 8000e1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2240      	movs	r2, #64	@ 0x40
 8000e20:	2100      	movs	r1, #0
 8000e22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	e000      	b.n	8000e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e28:	2302      	movs	r3, #2
  }
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	ffffefff 	.word	0xffffefff

08000e38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2241      	movs	r2, #65	@ 0x41
 8000e46:	5c9b      	ldrb	r3, [r3, r2]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b20      	cmp	r3, #32
 8000e4c:	d139      	bne.n	8000ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2240      	movs	r2, #64	@ 0x40
 8000e52:	5c9b      	ldrb	r3, [r3, r2]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e033      	b.n	8000ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2240      	movs	r2, #64	@ 0x40
 8000e60:	2101      	movs	r1, #1
 8000e62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2241      	movs	r2, #65	@ 0x41
 8000e68:	2124      	movs	r1, #36	@ 0x24
 8000e6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2101      	movs	r1, #1
 8000e78:	438a      	bics	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4a11      	ldr	r2, [pc, #68]	@ (8000ecc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2241      	movs	r2, #65	@ 0x41
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2240      	movs	r2, #64	@ 0x40
 8000eba:	2100      	movs	r1, #0
 8000ebc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ec2:	2302      	movs	r3, #2
  }
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	fffff0ff 	.word	0xfffff0ff

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e301      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x1e>
 8000eec:	e08d      	b.n	800100a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eee:	4bc3      	ldr	r3, [pc, #780]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d00e      	beq.n	8000f18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000efa:	4bc0      	ldr	r3, [pc, #768]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	220c      	movs	r2, #12
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d116      	bne.n	8000f34 <HAL_RCC_OscConfig+0x64>
 8000f06:	4bbd      	ldr	r3, [pc, #756]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	025b      	lsls	r3, r3, #9
 8000f0e:	401a      	ands	r2, r3
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d10d      	bne.n	8000f34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	4bb8      	ldr	r3, [pc, #736]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	029b      	lsls	r3, r3, #10
 8000f20:	4013      	ands	r3, r2
 8000f22:	d100      	bne.n	8000f26 <HAL_RCC_OscConfig+0x56>
 8000f24:	e070      	b.n	8001008 <HAL_RCC_OscConfig+0x138>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d000      	beq.n	8000f30 <HAL_RCC_OscConfig+0x60>
 8000f2e:	e06b      	b.n	8001008 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e2d8      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d107      	bne.n	8000f4c <HAL_RCC_OscConfig+0x7c>
 8000f3c:	4baf      	ldr	r3, [pc, #700]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4bae      	ldr	r3, [pc, #696]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e02f      	b.n	8000fac <HAL_RCC_OscConfig+0xdc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10c      	bne.n	8000f6e <HAL_RCC_OscConfig+0x9e>
 8000f54:	4ba9      	ldr	r3, [pc, #676]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4ba8      	ldr	r3, [pc, #672]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	49a9      	ldr	r1, [pc, #676]	@ (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	4ba6      	ldr	r3, [pc, #664]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4ba5      	ldr	r3, [pc, #660]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f66:	49a7      	ldr	r1, [pc, #668]	@ (8001204 <HAL_RCC_OscConfig+0x334>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e01e      	b.n	8000fac <HAL_RCC_OscConfig+0xdc>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d10e      	bne.n	8000f94 <HAL_RCC_OscConfig+0xc4>
 8000f76:	4ba1      	ldr	r3, [pc, #644]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4ba0      	ldr	r3, [pc, #640]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	02c9      	lsls	r1, r1, #11
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4b9d      	ldr	r3, [pc, #628]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b9c      	ldr	r3, [pc, #624]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	2180      	movs	r1, #128	@ 0x80
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0xdc>
 8000f94:	4b99      	ldr	r3, [pc, #612]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b98      	ldr	r3, [pc, #608]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	4999      	ldr	r1, [pc, #612]	@ (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4b96      	ldr	r3, [pc, #600]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b95      	ldr	r3, [pc, #596]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	4997      	ldr	r1, [pc, #604]	@ (8001204 <HAL_RCC_OscConfig+0x334>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d014      	beq.n	8000fde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fbde 	bl	8000774 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fbd9 	bl	8000774 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	@ 0x64
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e28a      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd0:	4b8a      	ldr	r3, [pc, #552]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	029b      	lsls	r3, r3, #10
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0xee>
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fbc9 	bl	8000774 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fbc4 	bl	8000774 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	@ 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e275      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	4b80      	ldr	r3, [pc, #512]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	@ 0x80
 8001000:	029b      	lsls	r3, r3, #10
 8001002:	4013      	ands	r3, r2
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x118>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d100      	bne.n	8001016 <HAL_RCC_OscConfig+0x146>
 8001014:	e069      	b.n	80010ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001016:	4b79      	ldr	r3, [pc, #484]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	220c      	movs	r2, #12
 800101c:	4013      	ands	r3, r2
 800101e:	d00b      	beq.n	8001038 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001020:	4b76      	ldr	r3, [pc, #472]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	220c      	movs	r2, #12
 8001026:	4013      	ands	r3, r2
 8001028:	2b08      	cmp	r3, #8
 800102a:	d11c      	bne.n	8001066 <HAL_RCC_OscConfig+0x196>
 800102c:	4b73      	ldr	r3, [pc, #460]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	025b      	lsls	r3, r3, #9
 8001034:	4013      	ands	r3, r2
 8001036:	d116      	bne.n	8001066 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001038:	4b70      	ldr	r3, [pc, #448]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2202      	movs	r2, #2
 800103e:	4013      	ands	r3, r2
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x17e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d001      	beq.n	800104e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e24b      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104e:	4b6b      	ldr	r3, [pc, #428]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	22f8      	movs	r2, #248	@ 0xf8
 8001054:	4393      	bics	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	00da      	lsls	r2, r3, #3
 800105e:	4b67      	ldr	r3, [pc, #412]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001064:	e041      	b.n	80010ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d024      	beq.n	80010b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106e:	4b63      	ldr	r3, [pc, #396]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b62      	ldr	r3, [pc, #392]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fb7b 	bl	8000774 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fb76 	bl	8000774 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e227      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	4b59      	ldr	r3, [pc, #356]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	22f8      	movs	r2, #248	@ 0xf8
 80010a6:	4393      	bics	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	00da      	lsls	r2, r3, #3
 80010b0:	4b52      	ldr	r3, [pc, #328]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e018      	b.n	80010ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b8:	4b50      	ldr	r3, [pc, #320]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b4f      	ldr	r3, [pc, #316]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fb56 	bl	8000774 <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fb51 	bl	8000774 <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e202      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e0:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2202      	movs	r2, #2
 80010e6:	4013      	ands	r3, r2
 80010e8:	d1f1      	bne.n	80010ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2208      	movs	r2, #8
 80010f0:	4013      	ands	r3, r2
 80010f2:	d036      	beq.n	8001162 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d019      	beq.n	8001130 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fc:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001100:	4b3e      	ldr	r3, [pc, #248]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001102:	2101      	movs	r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fb34 	bl	8000774 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fb2f 	bl	8000774 <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1e0      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001124:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d0f1      	beq.n	8001112 <HAL_RCC_OscConfig+0x242>
 800112e:	e018      	b.n	8001162 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001130:	4b32      	ldr	r3, [pc, #200]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001136:	2101      	movs	r1, #1
 8001138:	438a      	bics	r2, r1
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fb1a 	bl	8000774 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001146:	f7ff fb15 	bl	8000774 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1c6      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	2202      	movs	r2, #2
 800115e:	4013      	ands	r3, r2
 8001160:	d1f1      	bne.n	8001146 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2204      	movs	r2, #4
 8001168:	4013      	ands	r3, r2
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0x29e>
 800116c:	e0b4      	b.n	80012d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116e:	201f      	movs	r0, #31
 8001170:	183b      	adds	r3, r7, r0
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001178:	69da      	ldr	r2, [r3, #28]
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	055b      	lsls	r3, r3, #21
 800117e:	4013      	ands	r3, r2
 8001180:	d110      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001184:	69da      	ldr	r2, [r3, #28]
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	0549      	lsls	r1, r1, #21
 800118c:	430a      	orrs	r2, r1
 800118e:	61da      	str	r2, [r3, #28]
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001192:	69da      	ldr	r2, [r3, #28]
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	055b      	lsls	r3, r3, #21
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800119e:	183b      	adds	r3, r7, r0
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4013      	ands	r3, r2
 80011ae:	d11a      	bne.n	80011e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_RCC_OscConfig+0x338>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <HAL_RCC_OscConfig+0x338>)
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	0049      	lsls	r1, r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011be:	f7ff fad9 	bl	8000774 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c8:	f7ff fad4 	bl	8000774 <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	@ 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e185      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_RCC_OscConfig+0x338>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10e      	bne.n	800120c <HAL_RCC_OscConfig+0x33c>
 80011ee:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	4b02      	ldr	r3, [pc, #8]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	621a      	str	r2, [r3, #32]
 80011fa:	e035      	b.n	8001268 <HAL_RCC_OscConfig+0x398>
 80011fc:	40021000 	.word	0x40021000
 8001200:	fffeffff 	.word	0xfffeffff
 8001204:	fffbffff 	.word	0xfffbffff
 8001208:	40007000 	.word	0x40007000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x35e>
 8001214:	4bb6      	ldr	r3, [pc, #728]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	4bb5      	ldr	r3, [pc, #724]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800121a:	2101      	movs	r1, #1
 800121c:	438a      	bics	r2, r1
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	4bb3      	ldr	r3, [pc, #716]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001222:	6a1a      	ldr	r2, [r3, #32]
 8001224:	4bb2      	ldr	r3, [pc, #712]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001226:	2104      	movs	r1, #4
 8001228:	438a      	bics	r2, r1
 800122a:	621a      	str	r2, [r3, #32]
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x398>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x380>
 8001236:	4bae      	ldr	r3, [pc, #696]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	4bad      	ldr	r3, [pc, #692]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800123c:	2104      	movs	r1, #4
 800123e:	430a      	orrs	r2, r1
 8001240:	621a      	str	r2, [r3, #32]
 8001242:	4bab      	ldr	r3, [pc, #684]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001244:	6a1a      	ldr	r2, [r3, #32]
 8001246:	4baa      	ldr	r3, [pc, #680]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001248:	2101      	movs	r1, #1
 800124a:	430a      	orrs	r2, r1
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0x398>
 8001250:	4ba7      	ldr	r3, [pc, #668]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	4ba6      	ldr	r3, [pc, #664]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	621a      	str	r2, [r3, #32]
 800125c:	4ba4      	ldr	r3, [pc, #656]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	4ba3      	ldr	r3, [pc, #652]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001262:	2104      	movs	r1, #4
 8001264:	438a      	bics	r2, r1
 8001266:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d014      	beq.n	800129a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff fa80 	bl	8000774 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e009      	b.n	800128e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fa7b 	bl	8000774 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	4a9b      	ldr	r2, [pc, #620]	@ (80014f4 <HAL_RCC_OscConfig+0x624>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e12b      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128e:	4b98      	ldr	r3, [pc, #608]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	2202      	movs	r2, #2
 8001294:	4013      	ands	r3, r2
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x3aa>
 8001298:	e013      	b.n	80012c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fa6b 	bl	8000774 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	e009      	b.n	80012b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fa66 	bl	8000774 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a91      	ldr	r2, [pc, #580]	@ (80014f4 <HAL_RCC_OscConfig+0x624>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e116      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b8d      	ldr	r3, [pc, #564]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	2202      	movs	r2, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012c2:	231f      	movs	r3, #31
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4b88      	ldr	r3, [pc, #544]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012ce:	69da      	ldr	r2, [r3, #28]
 80012d0:	4b87      	ldr	r3, [pc, #540]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012d2:	4989      	ldr	r1, [pc, #548]	@ (80014f8 <HAL_RCC_OscConfig+0x628>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2210      	movs	r2, #16
 80012de:	4013      	ands	r3, r2
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d12a      	bne.n	8001340 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012ea:	4b81      	ldr	r3, [pc, #516]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ee:	4b80      	ldr	r3, [pc, #512]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012f0:	2104      	movs	r1, #4
 80012f2:	430a      	orrs	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012f6:	4b7e      	ldr	r3, [pc, #504]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fa:	4b7d      	ldr	r3, [pc, #500]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80012fc:	2101      	movs	r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fa37 	bl	8000774 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800130c:	f7ff fa32 	bl	8000774 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e0e3      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800131e:	4b74      	ldr	r3, [pc, #464]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	d0f1      	beq.n	800130c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001328:	4b71      	ldr	r3, [pc, #452]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132c:	22f8      	movs	r2, #248	@ 0xf8
 800132e:	4393      	bics	r3, r2
 8001330:	0019      	movs	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	00da      	lsls	r2, r3, #3
 8001338:	4b6d      	ldr	r3, [pc, #436]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34
 800133e:	e034      	b.n	80013aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	3305      	adds	r3, #5
 8001346:	d111      	bne.n	800136c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001348:	4b69      	ldr	r3, [pc, #420]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800134a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800134c:	4b68      	ldr	r3, [pc, #416]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800134e:	2104      	movs	r1, #4
 8001350:	438a      	bics	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001354:	4b66      	ldr	r3, [pc, #408]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001358:	22f8      	movs	r2, #248	@ 0xf8
 800135a:	4393      	bics	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	4b62      	ldr	r3, [pc, #392]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
 800136a:	e01e      	b.n	80013aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800136c:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800136e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001370:	4b5f      	ldr	r3, [pc, #380]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001372:	2104      	movs	r1, #4
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001378:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800137a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800137c:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800137e:	2101      	movs	r1, #1
 8001380:	438a      	bics	r2, r1
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff f9f6 	bl	8000774 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800138e:	f7ff f9f1 	bl	8000774 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0a2      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013a0:	4b53      	ldr	r3, [pc, #332]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80013a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f1      	bne.n	800138e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d100      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4e4>
 80013b2:	e097      	b.n	80014e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b4:	4b4e      	ldr	r3, [pc, #312]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	220c      	movs	r2, #12
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x4f2>
 80013c0:	e06b      	b.n	800149a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d14c      	bne.n	8001464 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ca:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80013d0:	494a      	ldr	r1, [pc, #296]	@ (80014fc <HAL_RCC_OscConfig+0x62c>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff f9cd 	bl	8000774 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f9c8 	bl	8000774 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e079      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	4b3f      	ldr	r3, [pc, #252]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	049b      	lsls	r3, r3, #18
 80013fa:	4013      	ands	r3, r2
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fe:	4b3c      	ldr	r3, [pc, #240]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001402:	220f      	movs	r2, #15
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800140e:	430a      	orrs	r2, r1
 8001410:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a3a      	ldr	r2, [pc, #232]	@ (8001500 <HAL_RCC_OscConfig+0x630>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	431a      	orrs	r2, r3
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001432:	2180      	movs	r1, #128	@ 0x80
 8001434:	0449      	lsls	r1, r1, #17
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff f99b 	bl	8000774 <HAL_GetTick>
 800143e:	0003      	movs	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f996 	bl	8000774 <HAL_GetTick>
 8001448:	0002      	movs	r2, r0
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e047      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	049b      	lsls	r3, r3, #18
 800145e:	4013      	ands	r3, r2
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x574>
 8001462:	e03f      	b.n	80014e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001464:	4b22      	ldr	r3, [pc, #136]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800146a:	4924      	ldr	r1, [pc, #144]	@ (80014fc <HAL_RCC_OscConfig+0x62c>)
 800146c:	400a      	ands	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff f980 	bl	8000774 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff f97b 	bl	8000774 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e02c      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	049b      	lsls	r3, r3, #18
 8001494:	4013      	ands	r3, r2
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x5aa>
 8001498:	e024      	b.n	80014e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e01f      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_RCC_OscConfig+0x620>)
 80014ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	429a      	cmp	r2, r3
 80014c0:	d10e      	bne.n	80014e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	220f      	movs	r2, #15
 80014c6:	401a      	ands	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	23f0      	movs	r3, #240	@ 0xf0
 80014d4:	039b      	lsls	r3, r3, #14
 80014d6:	401a      	ands	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b008      	add	sp, #32
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	40021000 	.word	0x40021000
 80014f4:	00001388 	.word	0x00001388
 80014f8:	efffffff 	.word	0xefffffff
 80014fc:	feffffff 	.word	0xfeffffff
 8001500:	ffc2ffff 	.word	0xffc2ffff

08001504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b3      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b5b      	ldr	r3, [pc, #364]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d911      	bls.n	800154a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4393      	bics	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	4b55      	ldr	r3, [pc, #340]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e09a      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d015      	beq.n	8001580 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d006      	beq.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800155e:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4b4a      	ldr	r3, [pc, #296]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 8001564:	21e0      	movs	r1, #224	@ 0xe0
 8001566:	00c9      	lsls	r1, r1, #3
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	22f0      	movs	r2, #240	@ 0xf0
 8001572:	4393      	bics	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b44      	ldr	r3, [pc, #272]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d040      	beq.n	800160c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d114      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06e      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b38      	ldr	r3, [pc, #224]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d108      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e062      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b34      	ldr	r3, [pc, #208]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2202      	movs	r2, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e05b      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015dc:	f7ff f8ca 	bl	8000774 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e4:	e009      	b.n	80015fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e6:	f7ff f8c5 	bl	8000774 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	4a27      	ldr	r2, [pc, #156]	@ (8001690 <HAL_RCC_ClockConfig+0x18c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e042      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	220c      	movs	r2, #12
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	429a      	cmp	r2, r3
 800160a:	d1ec      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	4013      	ands	r3, r2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d211      	bcs.n	800163e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2201      	movs	r2, #1
 8001620:	4393      	bics	r3, r2
 8001622:	0019      	movs	r1, r3
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <HAL_RCC_ClockConfig+0x184>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d001      	beq.n	800163e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e020      	b.n	8001680 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2204      	movs	r2, #4
 8001644:	4013      	ands	r3, r2
 8001646:	d009      	beq.n	800165c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <HAL_RCC_ClockConfig+0x190>)
 800164e:	4013      	ands	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800165c:	f000 f820 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 8001660:	0001      	movs	r1, r0
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_RCC_ClockConfig+0x188>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	220f      	movs	r2, #15
 800166a:	4013      	ands	r3, r2
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_RCC_ClockConfig+0x194>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	000a      	movs	r2, r1
 8001672:	40da      	lsrs	r2, r3
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x198>)
 8001676:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001678:	2003      	movs	r0, #3
 800167a:	f7ff f835 	bl	80006e8 <HAL_InitTick>
  
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40022000 	.word	0x40022000
 800168c:	40021000 	.word	0x40021000
 8001690:	00001388 	.word	0x00001388
 8001694:	fffff8ff 	.word	0xfffff8ff
 8001698:	0800200c 	.word	0x0800200c
 800169c:	20000000 	.word	0x20000000

080016a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	220c      	movs	r2, #12
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x30>
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x36>
 80016ce:	e02c      	b.n	800172a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016d2:	613b      	str	r3, [r7, #16]
      break;
 80016d4:	e02c      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	220f      	movs	r2, #15
 80016dc:	4013      	ands	r3, r2
 80016de:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e8:	220f      	movs	r2, #15
 80016ea:	4013      	ands	r3, r2
 80016ec:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xa8>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	025b      	lsls	r3, r3, #9
 80016f8:	4013      	ands	r3, r2
 80016fa:	d009      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	4810      	ldr	r0, [pc, #64]	@ (8001740 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001700:	f7fe fd02 	bl	8000108 <__udivsi3>
 8001704:	0003      	movs	r3, r0
 8001706:	001a      	movs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4353      	muls	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	000a      	movs	r2, r1
 8001714:	0152      	lsls	r2, r2, #5
 8001716:	1a52      	subs	r2, r2, r1
 8001718:	0193      	lsls	r3, r2, #6
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	185b      	adds	r3, r3, r1
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
      break;
 8001728:	e002      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_RCC_GetSysClockFreq+0xa0>)
 800172c:	613b      	str	r3, [r7, #16]
      break;
 800172e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001730:	693b      	ldr	r3, [r7, #16]
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b006      	add	sp, #24
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	40021000 	.word	0x40021000
 8001740:	007a1200 	.word	0x007a1200
 8001744:	0800201c 	.word	0x0800201c
 8001748:	0800202c 	.word	0x0800202c

0800174c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001768:	e08e      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800176a:	2017      	movs	r0, #23
 800176c:	183b      	adds	r3, r7, r0
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	2380      	movs	r3, #128	@ 0x80
 8001778:	055b      	lsls	r3, r3, #21
 800177a:	4013      	ands	r3, r2
 800177c:	d110      	bne.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	0549      	lsls	r1, r1, #21
 8001788:	430a      	orrs	r2, r1
 800178a:	61da      	str	r2, [r3, #28]
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	183b      	adds	r3, r7, r0
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d11a      	bne.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ac:	4b49      	ldr	r3, [pc, #292]	@ (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	0049      	lsls	r1, r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7fe ffdb 	bl	8000774 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	e008      	b.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7fe ffd6 	bl	8000774 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	@ 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e077      	b.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	23c0      	movs	r3, #192	@ 0xc0
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d034      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	23c0      	movs	r3, #192	@ 0xc0
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d02c      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001804:	4b32      	ldr	r3, [pc, #200]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a33      	ldr	r2, [pc, #204]	@ (80018d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800180a:	4013      	ands	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0249      	lsls	r1, r1, #9
 8001818:	430a      	orrs	r2, r1
 800181a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800181c:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001822:	492e      	ldr	r1, [pc, #184]	@ (80018dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001824:	400a      	ands	r2, r1
 8001826:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7fe ff9d 	bl	8000774 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	e009      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7fe ff98 	bl	8000774 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	4a25      	ldr	r2, [pc, #148]	@ (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e038      	b.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001854:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d0f0      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800186e:	430a      	orrs	r2, r1
 8001870:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001872:	2317      	movs	r3, #23
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001882:	4918      	ldr	r1, [pc, #96]	@ (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001884:	400a      	ands	r2, r1
 8001886:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	d009      	beq.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	2203      	movs	r2, #3
 8001898:	4393      	bics	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2220      	movs	r2, #32
 80018ac:	4013      	ands	r3, r2
 80018ae:	d009      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018b0:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	2210      	movs	r2, #16
 80018b6:	4393      	bics	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b006      	add	sp, #24
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40007000 	.word	0x40007000
 80018d8:	fffffcff 	.word	0xfffffcff
 80018dc:	fffeffff 	.word	0xfffeffff
 80018e0:	00001388 	.word	0x00001388
 80018e4:	efffffff 	.word	0xefffffff

080018e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e042      	b.n	8001980 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	223d      	movs	r2, #61	@ 0x3d
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d107      	bne.n	8001916 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	223c      	movs	r2, #60	@ 0x3c
 800190a:	2100      	movs	r1, #0
 800190c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f7fe fe6d 	bl	80005f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	223d      	movs	r2, #61	@ 0x3d
 800191a:	2102      	movs	r1, #2
 800191c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	0019      	movs	r1, r3
 8001928:	0010      	movs	r0, r2
 800192a:	f000 f8dd 	bl	8001ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2246      	movs	r2, #70	@ 0x46
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	223e      	movs	r2, #62	@ 0x3e
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	223f      	movs	r2, #63	@ 0x3f
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2240      	movs	r2, #64	@ 0x40
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2241      	movs	r2, #65	@ 0x41
 8001952:	2101      	movs	r1, #1
 8001954:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2242      	movs	r2, #66	@ 0x42
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2243      	movs	r2, #67	@ 0x43
 8001962:	2101      	movs	r1, #1
 8001964:	5499      	strb	r1, [r3, r2]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2244      	movs	r2, #68	@ 0x44
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2245      	movs	r2, #69	@ 0x45
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	223d      	movs	r2, #61	@ 0x3d
 800197a:	2101      	movs	r1, #1
 800197c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e042      	b.n	8001a20 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	223d      	movs	r2, #61	@ 0x3d
 800199e:	5c9b      	ldrb	r3, [r3, r2]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	223c      	movs	r2, #60	@ 0x3c
 80019aa:	2100      	movs	r1, #0
 80019ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f839 	bl	8001a28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	223d      	movs	r2, #61	@ 0x3d
 80019ba:	2102      	movs	r1, #2
 80019bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	0019      	movs	r1, r3
 80019c8:	0010      	movs	r0, r2
 80019ca:	f000 f88d 	bl	8001ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2246      	movs	r2, #70	@ 0x46
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	223e      	movs	r2, #62	@ 0x3e
 80019da:	2101      	movs	r1, #1
 80019dc:	5499      	strb	r1, [r3, r2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	223f      	movs	r2, #63	@ 0x3f
 80019e2:	2101      	movs	r1, #1
 80019e4:	5499      	strb	r1, [r3, r2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2240      	movs	r2, #64	@ 0x40
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2241      	movs	r2, #65	@ 0x41
 80019f2:	2101      	movs	r1, #1
 80019f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2242      	movs	r2, #66	@ 0x42
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2243      	movs	r2, #67	@ 0x43
 8001a02:	2101      	movs	r1, #1
 8001a04:	5499      	strb	r1, [r3, r2]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2244      	movs	r2, #68	@ 0x44
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2245      	movs	r2, #69	@ 0x45
 8001a12:	2101      	movs	r1, #1
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223d      	movs	r2, #61	@ 0x3d
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001a30:	46c0      	nop			@ (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2317      	movs	r3, #23
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	223c      	movs	r2, #60	@ 0x3c
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_OC_ConfigChannel+0x22>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e042      	b.n	8001ae0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	223c      	movs	r2, #60	@ 0x3c
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d027      	beq.n	8001ab8 <HAL_TIM_OC_ConfigChannel+0x80>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d82c      	bhi.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x90>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d019      	beq.n	8001aa8 <HAL_TIM_OC_ConfigChannel+0x70>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d826      	bhi.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x90>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_TIM_OC_ConfigChannel+0x50>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d008      	beq.n	8001a98 <HAL_TIM_OC_ConfigChannel+0x60>
 8001a86:	e01f      	b.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f8a3 	bl	8001bdc <TIM_OC1_SetConfig>
      break;
 8001a96:	e01c      	b.n	8001ad2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 f919 	bl	8001cd8 <TIM_OC2_SetConfig>
      break;
 8001aa6:	e014      	b.n	8001ad2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f98f 	bl	8001dd4 <TIM_OC3_SetConfig>
      break;
 8001ab6:	e00c      	b.n	8001ad2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	0011      	movs	r1, r2
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 fa07 	bl	8001ed4 <TIM_OC4_SetConfig>
      break;
 8001ac6:	e004      	b.n	8001ad2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8001ac8:	2317      	movs	r3, #23
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
      break;
 8001ad0:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	223c      	movs	r2, #60	@ 0x3c
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	5499      	strb	r1, [r3, r2]

  return status;
 8001ada:	2317      	movs	r3, #23
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b006      	add	sp, #24
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a32      	ldr	r2, [pc, #200]	@ (8001bc4 <TIM_Base_SetConfig+0xdc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d003      	beq.n	8001b08 <TIM_Base_SetConfig+0x20>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <TIM_Base_SetConfig+0xe0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d108      	bne.n	8001b1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2270      	movs	r2, #112	@ 0x70
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a29      	ldr	r2, [pc, #164]	@ (8001bc4 <TIM_Base_SetConfig+0xdc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00f      	beq.n	8001b42 <TIM_Base_SetConfig+0x5a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a28      	ldr	r2, [pc, #160]	@ (8001bc8 <TIM_Base_SetConfig+0xe0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00b      	beq.n	8001b42 <TIM_Base_SetConfig+0x5a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a27      	ldr	r2, [pc, #156]	@ (8001bcc <TIM_Base_SetConfig+0xe4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <TIM_Base_SetConfig+0x5a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a26      	ldr	r2, [pc, #152]	@ (8001bd0 <TIM_Base_SetConfig+0xe8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d003      	beq.n	8001b42 <TIM_Base_SetConfig+0x5a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a25      	ldr	r2, [pc, #148]	@ (8001bd4 <TIM_Base_SetConfig+0xec>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d108      	bne.n	8001b54 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <TIM_Base_SetConfig+0xf0>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	4393      	bics	r3, r2
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <TIM_Base_SetConfig+0xdc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <TIM_Base_SetConfig+0xaa>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <TIM_Base_SetConfig+0xe8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d003      	beq.n	8001b92 <TIM_Base_SetConfig+0xaa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <TIM_Base_SetConfig+0xec>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d103      	bne.n	8001b9a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]
  }
}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40002000 	.word	0x40002000
 8001bd0:	40014400 	.word	0x40014400
 8001bd4:	40014800 	.word	0x40014800
 8001bd8:	fffffcff 	.word	0xfffffcff

08001bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4393      	bics	r3, r2
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2270      	movs	r2, #112	@ 0x70
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2203      	movs	r2, #3
 8001c12:	4393      	bics	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4393      	bics	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a23      	ldr	r2, [pc, #140]	@ (8001cc4 <TIM_OC1_SetConfig+0xe8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <TIM_OC1_SetConfig+0x6e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <TIM_OC1_SetConfig+0xec>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d003      	beq.n	8001c4a <TIM_OC1_SetConfig+0x6e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a21      	ldr	r2, [pc, #132]	@ (8001ccc <TIM_OC1_SetConfig+0xf0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10c      	bne.n	8001c64 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4393      	bics	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4393      	bics	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <TIM_OC1_SetConfig+0xe8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <TIM_OC1_SetConfig+0xa0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	@ (8001cc8 <TIM_OC1_SetConfig+0xec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d003      	beq.n	8001c7c <TIM_OC1_SetConfig+0xa0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a15      	ldr	r2, [pc, #84]	@ (8001ccc <TIM_OC1_SetConfig+0xf0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <TIM_OC1_SetConfig+0xf4>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4a13      	ldr	r2, [pc, #76]	@ (8001cd4 <TIM_OC1_SetConfig+0xf8>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	621a      	str	r2, [r3, #32]
}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b006      	add	sp, #24
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40014400 	.word	0x40014400
 8001ccc:	40014800 	.word	0x40014800
 8001cd0:	fffffeff 	.word	0xfffffeff
 8001cd4:	fffffdff 	.word	0xfffffdff

08001cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	2210      	movs	r2, #16
 8001cee:	4393      	bics	r3, r2
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a2c      	ldr	r2, [pc, #176]	@ (8001db8 <TIM_OC2_SetConfig+0xe0>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dbc <TIM_OC2_SetConfig+0xe4>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2220      	movs	r2, #32
 8001d22:	4393      	bics	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <TIM_OC2_SetConfig+0xe8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d10d      	bne.n	8001d56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2280      	movs	r2, #128	@ 0x80
 8001d3e:	4393      	bics	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2240      	movs	r2, #64	@ 0x40
 8001d52:	4393      	bics	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a19      	ldr	r2, [pc, #100]	@ (8001dc0 <TIM_OC2_SetConfig+0xe8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <TIM_OC2_SetConfig+0x96>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a18      	ldr	r2, [pc, #96]	@ (8001dc4 <TIM_OC2_SetConfig+0xec>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_OC2_SetConfig+0x96>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <TIM_OC2_SetConfig+0xf0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d113      	bne.n	8001d96 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4a16      	ldr	r2, [pc, #88]	@ (8001dcc <TIM_OC2_SetConfig+0xf4>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4a15      	ldr	r2, [pc, #84]	@ (8001dd0 <TIM_OC2_SetConfig+0xf8>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	621a      	str	r2, [r3, #32]
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b006      	add	sp, #24
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	ffff8fff 	.word	0xffff8fff
 8001dbc:	fffffcff 	.word	0xfffffcff
 8001dc0:	40012c00 	.word	0x40012c00
 8001dc4:	40014400 	.word	0x40014400
 8001dc8:	40014800 	.word	0x40014800
 8001dcc:	fffffbff 	.word	0xfffffbff
 8001dd0:	fffff7ff 	.word	0xfffff7ff

08001dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <TIM_OC3_SetConfig+0xdc>)
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2270      	movs	r2, #112	@ 0x70
 8001e00:	4393      	bics	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2203      	movs	r2, #3
 8001e08:	4393      	bics	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <TIM_OC3_SetConfig+0xe0>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a22      	ldr	r2, [pc, #136]	@ (8001eb8 <TIM_OC3_SetConfig+0xe4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10d      	bne.n	8001e4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <TIM_OC3_SetConfig+0xe8>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <TIM_OC3_SetConfig+0xec>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <TIM_OC3_SetConfig+0xe4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <TIM_OC3_SetConfig+0x92>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec4 <TIM_OC3_SetConfig+0xf0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <TIM_OC3_SetConfig+0x92>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <TIM_OC3_SetConfig+0xf4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d113      	bne.n	8001e8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <TIM_OC3_SetConfig+0xf8>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4a17      	ldr	r2, [pc, #92]	@ (8001ed0 <TIM_OC3_SetConfig+0xfc>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	621a      	str	r2, [r3, #32]
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b006      	add	sp, #24
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	fffffeff 	.word	0xfffffeff
 8001eb4:	fffffdff 	.word	0xfffffdff
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	fffff7ff 	.word	0xfffff7ff
 8001ec0:	fffffbff 	.word	0xfffffbff
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	ffffefff 	.word	0xffffefff
 8001ed0:	ffffdfff 	.word	0xffffdfff

08001ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a24      	ldr	r2, [pc, #144]	@ (8001f7c <TIM_OC4_SetConfig+0xa8>)
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a20      	ldr	r2, [pc, #128]	@ (8001f80 <TIM_OC4_SetConfig+0xac>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a1f      	ldr	r2, [pc, #124]	@ (8001f84 <TIM_OC4_SetConfig+0xb0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f88 <TIM_OC4_SetConfig+0xb4>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	031b      	lsls	r3, r3, #12
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <TIM_OC4_SetConfig+0xb8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <TIM_OC4_SetConfig+0x70>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a16      	ldr	r2, [pc, #88]	@ (8001f90 <TIM_OC4_SetConfig+0xbc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d003      	beq.n	8001f44 <TIM_OC4_SetConfig+0x70>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a15      	ldr	r2, [pc, #84]	@ (8001f94 <TIM_OC4_SetConfig+0xc0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d109      	bne.n	8001f58 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <TIM_OC4_SetConfig+0xc4>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	621a      	str	r2, [r3, #32]
}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b006      	add	sp, #24
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	ffffefff 	.word	0xffffefff
 8001f80:	ffff8fff 	.word	0xffff8fff
 8001f84:	fffffcff 	.word	0xfffffcff
 8001f88:	ffffdfff 	.word	0xffffdfff
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40014400 	.word	0x40014400
 8001f94:	40014800 	.word	0x40014800
 8001f98:	ffffbfff 	.word	0xffffbfff

08001f9c <memset>:
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	1882      	adds	r2, r0, r2
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d100      	bne.n	8001fa6 <memset+0xa>
 8001fa4:	4770      	bx	lr
 8001fa6:	7019      	strb	r1, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	e7f9      	b.n	8001fa0 <memset+0x4>

08001fac <__libc_init_array>:
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	2600      	movs	r6, #0
 8001fb0:	4c0c      	ldr	r4, [pc, #48]	@ (8001fe4 <__libc_init_array+0x38>)
 8001fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8001fe8 <__libc_init_array+0x3c>)
 8001fb4:	1b64      	subs	r4, r4, r5
 8001fb6:	10a4      	asrs	r4, r4, #2
 8001fb8:	42a6      	cmp	r6, r4
 8001fba:	d109      	bne.n	8001fd0 <__libc_init_array+0x24>
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	f000 f819 	bl	8001ff4 <_init>
 8001fc2:	4c0a      	ldr	r4, [pc, #40]	@ (8001fec <__libc_init_array+0x40>)
 8001fc4:	4d0a      	ldr	r5, [pc, #40]	@ (8001ff0 <__libc_init_array+0x44>)
 8001fc6:	1b64      	subs	r4, r4, r5
 8001fc8:	10a4      	asrs	r4, r4, #2
 8001fca:	42a6      	cmp	r6, r4
 8001fcc:	d105      	bne.n	8001fda <__libc_init_array+0x2e>
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	00b3      	lsls	r3, r6, #2
 8001fd2:	58eb      	ldr	r3, [r5, r3]
 8001fd4:	4798      	blx	r3
 8001fd6:	3601      	adds	r6, #1
 8001fd8:	e7ee      	b.n	8001fb8 <__libc_init_array+0xc>
 8001fda:	00b3      	lsls	r3, r6, #2
 8001fdc:	58eb      	ldr	r3, [r5, r3]
 8001fde:	4798      	blx	r3
 8001fe0:	3601      	adds	r6, #1
 8001fe2:	e7f2      	b.n	8001fca <__libc_init_array+0x1e>
 8001fe4:	0800203c 	.word	0x0800203c
 8001fe8:	0800203c 	.word	0x0800203c
 8001fec:	08002040 	.word	0x08002040
 8001ff0:	0800203c 	.word	0x0800203c

08001ff4 <_init>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr

08002000 <_fini>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002006:	bc08      	pop	{r3}
 8002008:	469e      	mov	lr, r3
 800200a:	4770      	bx	lr
